$#include <interfaces/ShelfConfigurationInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class ShelfConfigurationInterface : public Interface
{

  typedef enum {
    RED,
    BLACK,
    EMPTY
  } SlotColor;

  SlotColor left();
  void set_left(const SlotColor new_left);
  int maxlenof_left() const;
  SlotColor center();
  void set_center(const SlotColor new_center);
  int maxlenof_center() const;
  SlotColor right();
  void set_right(const SlotColor new_right);
  int maxlenof_right() const;
  bool is_ready();
  void set_ready(const bool new_ready);
  int maxlenof_ready() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.ShelfConfigurationInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.ShelfConfigurationInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.ShelfConfigurationInterface.create_message = fawkes.Interface.create_message

$]

}
