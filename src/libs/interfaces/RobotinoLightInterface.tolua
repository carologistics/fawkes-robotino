$#include <interfaces/RobotinoLightInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class RobotinoLightInterface : public Interface
{

  typedef enum {
    ON,
    OFF,
    BLINKING,
    UNKNOWN
  } LightState;

  LightState red();
  void set_red(const LightState new_red);
  int maxlenof_red() const;
  LightState yellow();
  void set_yellow(const LightState new_yellow);
  int maxlenof_yellow() const;
  LightState green();
  void set_green(const LightState new_green);
  int maxlenof_green() const;
  int visibility_history();
  void set_visibility_history(const int new_visibility_history);
  int maxlenof_visibility_history() const;
  bool is_ready();
  void set_ready(const bool new_ready);
  int maxlenof_ready() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
