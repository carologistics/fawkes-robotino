
/***************************************************************************
 *  MachineInstructions.proto - LLSF Protocol - Machine instruction messages
 *
 *  Created: Thu Apr 16 14:19:07 2015
 *  Copyright  2013  Tim Niemueller [www.niemueller.de]
 ****************************************************************************/

/*  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the authors nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto2";

package llsf_msgs;

import "MachineDescription.proto";
import "ProductColor.proto";
import "Team.proto";

option java_package = "org.robocup_logistics.llsf_msgs";
option java_outer_classname = "MachineInstructionProtos";

enum MachineSide {
  INPUT = 1;
  OUTPUT = 2;
}

message PrepareInstructionBS {
  required MachineSide side = 1;
  required BaseColor color = 2;
}

message PrepareInstructionDS {
  reserved "gate";
  reserved 1;
  // Send order_id 0 to let DS consume a product without further action.
  // This can be used to get rid of waste products, such as clear bases.
  required uint32 order_id = 2;
}

message PrepareInstructionSS {
  required SSOp operation = 1;
  // Shelves:     Slots:
  // Top 5
  //     4         1 3 5 7
  //     3         0 2 4 6
  //     2   Input ------> OUTPUT
  //     1          (_)
  // BOT 0           |
  required uint32 shelf = 2;
  required uint32 slot = 3;
  // Optional description of the workpiece that is stored.
  // The RefBox attaches this description when sending information about
  // stored products
  optional string wp_description = 10;
}

message PrepareInstructionRS { required RingColor ring_color = 1; }

message PrepareInstructionCS { required CSOp operation = 1; }

message PrepareMachine {
  enum CompType {
    COMP_ID = 2000;
    MSG_TYPE = 101;
  }

  required Team team_color = 1;
  // Machine name which to instruct
  required string machine = 2;

  optional PrepareInstructionBS instruction_bs = 4;
  optional PrepareInstructionDS instruction_ds = 5;
  optional PrepareInstructionSS instruction_ss = 8;
  optional PrepareInstructionRS instruction_rs = 6;
  optional PrepareInstructionCS instruction_cs = 7;
  // time since Unix epoch in seconds
  // if specified and the message is too old it gets ignored
  // (threshold is specified in globals.clp)
  optional uint64 sent_at = 15;
}

message ResetMachine {
  enum CompType {
    COMP_ID = 2000;
    MSG_TYPE = 104;
  }

  required Team team_color = 1;
  // Machine name which to instruct
  required string machine = 2;
}
