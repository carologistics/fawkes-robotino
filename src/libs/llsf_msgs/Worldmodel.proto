/***************************************************************************
 *  Worldmodel.proto - Worldmodel of the LLSF Production for synchronization
 *
 *  Created: Mon Mar 10 15:10:52 2014
 *  Copyright  2013  Frederik Zwilling
 ****************************************************************************/

package llsf_msgs;

import "PuckInfo.proto";
import "MachineInstructions.proto";

enum WmCapColor {
  NONE = 0;
  BLACK = 1;
  GREY = 2;
}

message MachineWMState {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1339;
  }

  optional string name     = 1;
  required uint32 loaded_id  = 2;
  repeated string incoming  = 3;
  repeated string incoming_agent  = 4;
  required uint32 prod_finished_time = 5;
  required uint32 produced_id  = 6;
  required uint32 out_of_order_until = 7;

  //optional fields for cap-stations
  optional WmCapColor cap_loaded = 8;

  //optional fields for ring-stations
  optional RingColor ring_color_selected = 9;
  optional uint32 ring_bases_needed = 10;
}

message ProductState {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1351;
  }

  required uint32 id  = 1;
  optional BaseColor base = 2; //leave empty for unknown
  //mounted rings from bottom to top
  repeated RingColor rings  = 3;
  required WmCapColor cap  = 4;
}

message PuckStorageState {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1347;
  }

  required string    name     = 1;
  optional PuckState puck  = 2;
  repeated string incoming  = 3;
  repeated string incoming_agent  = 4;
}

message TagPosition {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1348;
  }

  required string machine = 1;
  required MachineSide side    = 2;
  required string frame   = 3;
  repeated float  trans   = 4;
  // Rotation as quaternion
  repeated float  rot     = 5;
}

message ZoneState {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1349;
  }

  required string name = 1;
  required string machine = 2;
  required bool recognized = 3;
  required bool still_to_explore = 4;
  required uint32 times_searched = 5;
}

message WorldmodelOrder {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1345;
  }

  optional uint32 id = 1;
  optional uint32 in_delivery = 2;
}

message Worldmodel {
  //With this message the master publishes his worldmodel

  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1340;
  }

  // List of machines states
  repeated MachineWMState machines = 1;
  repeated WorldmodelOrder orders = 2;
  repeated PuckStorageState storage = 3;
  repeated ZoneState zones = 4;
  repeated ProductState products = 5;
}

message TagPositions {
  //With this message the master publishes all tag positions
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1350;
  }

  repeated TagPosition tag_positions = 1;
}

message WorldmodelChange {
  // With this message a Slave informs the master about a change in the worldmodel

  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1341;
  }

  required uint32 id = 1;
  optional string place = 2;
  // what should be changed by this message (indicates which optional field is used)
  required string change = 3;
  // which agent sent this message?
  required string agent = 4;

  // the value something is changed to is in one of the following fields
  // depending on the type of the value
  optional string value_string = 5;
  optional uint32 value_uint32 = 6;
  optional ProductState value_puckstate = 7;
  optional TagPosition tag_position = 8;
}

message WorldmodelChangeAck {

  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 1342;
  }
  required uint32 id = 1;
}
