$#include <interfaces/NavGraphWithMPSGeneratorInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class NavGraphWithMPSGeneratorInterface : public Interface
{

  typedef enum {
    INPUT,
    OUTPUT
  } Side;

  class ClearMessage : public Message
  {
    ClearMessage();
    ~ClearMessage();

  };

  class UpdateStationByTagMessage : public Message
  {
    UpdateStationByTagMessage(char * ini_id, Side ini_side, char * ini_frame, double * ini_tag_translation, double * ini_tag_rotation);
    UpdateStationByTagMessage();
    ~UpdateStationByTagMessage();

    char * id();
    void set_id(const char * new_id);
    int maxlenof_id() const;
    Side side();
    void set_side(const Side new_side);
    int maxlenof_side() const;
    char * frame();
    void set_frame(const char * new_frame);
    int maxlenof_frame() const;
    double tag_translation(int index);
    void set_tag_translation(unsigned int index, const double new_tag_translation);
    int maxlenof_tag_translation() const;
    double tag_rotation(int index);
    void set_tag_rotation(unsigned int index, const double new_tag_rotation);
    int maxlenof_tag_rotation() const;
  };

  char * last_id();
  void set_last_id(const char * new_last_id);
  int maxlenof_last_id() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
