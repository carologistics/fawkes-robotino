
/***************************************************************************
 *  NavGraphWithMPSGeneratorInterface.h - Fawkes BlackBoard Interface - NavGraphWithMPSGeneratorInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2015  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_NAVGRAPHWITHMPSGENERATORINTERFACE_H_
#define __INTERFACES_NAVGRAPHWITHMPSGENERATORINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class NavGraphWithMPSGeneratorInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(NavGraphWithMPSGeneratorInterface)
 /// @endcond
 public:
  /* constants */

  /** Which side is being added. */
  typedef enum {
    INPUT /**< Input of station. */,
    OUTPUT /**< Output of station. */
  } Side;
  const char * tostring_Side(Side value) const;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    char last_id[64]; /**< 
      Name of last added station.
     */
  } NavGraphWithMPSGeneratorInterface_data_t;
#pragma pack(pop)

  NavGraphWithMPSGeneratorInterface_data_t *data;

  interface_enum_map_t enum_map_Side;
 public:
  /* messages */
  class ClearMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } ClearMessage_data_t;
#pragma pack(pop)

    ClearMessage_data_t *data;

  interface_enum_map_t enum_map_Side;
   public:
    ClearMessage();
    ~ClearMessage();

    ClearMessage(const ClearMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class UpdateStationByTagMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char id[64]; /**< 
      ID of the obstacle. Can later be used to remove it again.
     */
      int32_t side; /**< Which side are we reporting. */
      char frame[32]; /**< 
      Coordinate reference frame of tag.
     */
      double tag_translation[3]; /**< 
      Translation vector from the reference frame's origin, ordered as (x, y, z).
     */
      double tag_rotation[4]; /**< 
      Rotation quaternion relative to reference frame, ordered as (x, y, z, w).
     */
    } UpdateStationByTagMessage_data_t;
#pragma pack(pop)

    UpdateStationByTagMessage_data_t *data;

  interface_enum_map_t enum_map_Side;
   public:
    UpdateStationByTagMessage(const char * ini_id, const Side ini_side, const char * ini_frame, const double * ini_tag_translation, const double * ini_tag_rotation);
    UpdateStationByTagMessage();
    ~UpdateStationByTagMessage();

    UpdateStationByTagMessage(const UpdateStationByTagMessage *m);
    /* Methods */
    char * id() const;
    void set_id(const char * new_id);
    size_t maxlenof_id() const;
    Side side() const;
    void set_side(const Side new_side);
    size_t maxlenof_side() const;
    char * frame() const;
    void set_frame(const char * new_frame);
    size_t maxlenof_frame() const;
    double * tag_translation() const;
    double tag_translation(unsigned int index) const;
    void set_tag_translation(unsigned int index, const double new_tag_translation);
    void set_tag_translation(const double * new_tag_translation);
    size_t maxlenof_tag_translation() const;
    double * tag_rotation() const;
    double tag_rotation(unsigned int index) const;
    void set_tag_rotation(unsigned int index, const double new_tag_rotation);
    void set_tag_rotation(const double * new_tag_rotation);
    size_t maxlenof_tag_rotation() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  NavGraphWithMPSGeneratorInterface();
  ~NavGraphWithMPSGeneratorInterface();

 public:
  /* Methods */
  char * last_id() const;
  void set_last_id(const char * new_last_id);
  size_t maxlenof_last_id() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
