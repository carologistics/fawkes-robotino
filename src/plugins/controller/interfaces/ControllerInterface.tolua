$#include <interfaces/ControllerInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class ControllerInterface : public Interface
{

  class PidControlMessage : public Message
  {
    PidControlMessage(char * ini_robot_frame, char * ini_target_frame, float ini_x_error, float ini_y_error, float ini_ori_error, float ini_x_offset, float ini_y_offset, float ini_ori_offset, float ini_kp, float ini_ki, float ini_kd);
    PidControlMessage();
    ~PidControlMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * robot_frame();
    void set_robot_frame(const char * new_robot_frame);
    int maxlenof_robot_frame() const;
    char * target_frame();
    void set_target_frame(const char * new_target_frame);
    int maxlenof_target_frame() const;
    float x_error();
    void set_x_error(const float new_x_error);
    int maxlenof_x_error() const;
    float y_error();
    void set_y_error(const float new_y_error);
    int maxlenof_y_error() const;
    float ori_error();
    void set_ori_error(const float new_ori_error);
    int maxlenof_ori_error() const;
    float x_offset();
    void set_x_offset(const float new_x_offset);
    int maxlenof_x_offset() const;
    float y_offset();
    void set_y_offset(const float new_y_offset);
    int maxlenof_y_offset() const;
    float ori_offset();
    void set_ori_offset(const float new_ori_offset);
    int maxlenof_ori_offset() const;
    float kp();
    void set_kp(const float new_kp);
    int maxlenof_kp() const;
    float ki();
    void set_ki(const float new_ki);
    int maxlenof_ki() const;
    float kd();
    void set_kd(const float new_kd);
    int maxlenof_kd() const;
  };

  bool is_controller_running();
  void set_controller_running(const bool new_controller_running);
  int maxlenof_controller_running() const;
  char * robot_frame();
  void set_robot_frame(const char * new_robot_frame);
  int maxlenof_robot_frame() const;
  char * target_frame();
  void set_target_frame(const char * new_target_frame);
  int maxlenof_target_frame() const;
  float x_error();
  void set_x_error(const float new_x_error);
  int maxlenof_x_error() const;
  float y_error();
  void set_y_error(const float new_y_error);
  int maxlenof_y_error() const;
  float ori_error();
  void set_ori_error(const float new_ori_error);
  int maxlenof_ori_error() const;
  float x_offset();
  void set_x_offset(const float new_x_offset);
  int maxlenof_x_offset() const;
  float y_offset();
  void set_y_offset(const float new_y_offset);
  int maxlenof_y_offset() const;
  float ori_offset();
  void set_ori_offset(const float new_ori_offset);
  int maxlenof_ori_offset() const;
  float kp();
  void set_kp(const float new_kp);
  int maxlenof_kp() const;
  float ki();
  void set_ki(const float new_ki);
  int maxlenof_ki() const;
  float kd();
  void set_kd(const float new_kd);
  int maxlenof_kd() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.ControllerInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.ControllerInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.ControllerInterface.create_message = fawkes.Interface.create_message

$]

}
