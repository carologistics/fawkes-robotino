/***************************************************************************
 *  tag_position_interface.cpp - Interface handler for tag position
 *
 *  Generated: Mon Mar 23 12:01:15 2015
 *  Copyright  2012  Randolph Maaßen
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#include "tag_position_interface.h"

/** @class TagPositionInterface "tag_position_interface.h"
 * This class is used to handle the Blackboard Position3DInterface class
 * by providing a minimal needed api to its users
 *
 * @author Randolph Maaßen
 */

/**
 * @param position_interface The inerface, generated by the Blackboard, that this instance handles.
 * @param vector_position The position in the TagPositionList, or any other enumeration.
 */
TagPositionInterface::TagPositionInterface(fawkes::Position3DInterface *position_interface, u_int32_t vector_position)
{
  this->interface_ = position_interface;
  this->vector_position_ = vector_position;
  this->visibility_history_ = 0;
  this->marker_id_ = 0;
  this->touched_ = false;
}

/**
 *
 */
TagPositionInterface::~TagPositionInterface()
{
  // no need to clear/free the interface, the TagPositionList takes care of it
}

/**
 * This method will update the position of the tag in the interface
 * it also sets a marker for the visibility history, so using write()
 * updates the Interfae properly. It transforms the camera position
 * into fawkes robot position.
 *
 * @param new_pose The new Position of the marker, as got from alvar::MarkerData
 */
void TagPositionInterface::set_pose(alvar::Pose new_pose)
{
  //temp mat to get cv data
  CvMat mat;
  //angles in quaternion
  double rot[3];
  //create the mat
  cvInitMatHeader(&mat, 3, 1, CV_64F, rot);
  // get the angles in euler
  new_pose.GetEuler(&mat);
  //get the temporary quaternion in wxyz
  rot[0] = CV_MAT_ELEM(mat, double, 0, 0);
  rot[1] = CV_MAT_ELEM(mat, double, 1, 0);
  rot[2] = CV_MAT_ELEM(mat, double, 2, 0);
  // create a quaternion on the angles. The coordinate system is shifted here
  fawkes::tf::Quaternion tag_rot(rot[0]*M_PI/180,rot[1]*M_PI/180,rot[2]*M_PI/180);

  //publish the quaternion
  this->interface_->set_rotation(ROT::X,tag_rot.getX());
  this->interface_->set_rotation(ROT::Y,tag_rot.getY());
  this->interface_->set_rotation(ROT::Z,tag_rot.getZ());
  this->interface_->set_rotation(ROT::W,tag_rot.getW());
  //publish the translation
  this->interface_->set_translation(TRANS::T_X/*1*/,new_pose.translation[ALVAR_TRANS::A_T_X/*0*/]/1000);
  this->interface_->set_translation(TRANS::T_Y/*2*/,-new_pose.translation[ALVAR_TRANS::A_T_Y/*1*/]/1000);
  this->interface_->set_translation(TRANS::T_Z/*0*/,-new_pose.translation[ALVAR_TRANS::A_T_Z/*2*/]/1000);

  this->touched_=true;
}

/**
 * Sets a marker ID to store and identify this interface. It also resets the visibility history
 * so the marker is seen from the beginning on.
 *
 * @param new_id the new ID to set
 */
void TagPositionInterface::set_marker_id(u_int32_t new_id)
{
  // apply the new id
  this->marker_id_ = new_id;
  // reset the interface, the visibility history is 0
  this->visibility_history_ = 0;
}

/**
 * Writes out the set pose and visibility history.
 * If the Pose was set since the last write the visibility history is incremented and both information
 * is writ to the Blackboard.
 * If the pose was no set, the visibility history is decremented and written to the Blackboard.
 * If the visibility history is negativ (no tag seen), the interface is considered empty.
 */
void TagPositionInterface::write()
{
  // update the visibility history according to the marker, weather this interface got a new pose
  if(this->touched_){
    this->visibility_history_++;
  }
  else
  {
    this->visibility_history_--;
  }
  // empty marker id if the tag is no longer visible
  if(this->marker_id_ != EMPTY_INTERFACE_MARKER_ID && this->visibility_history_ < 0)
  {
    this->marker_id_ = EMPTY_INTERFACE_MARKER_ID;
  }
  // set the new visibility history
  this->interface_->set_visibility_history(this->visibility_history_);
  // write out the interface
  this->interface_->write();
  // reset the update marker
  this->touched_ = false;
}
