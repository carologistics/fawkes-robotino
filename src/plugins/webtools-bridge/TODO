TODO:

* Iterate over all the ifdefines and make the naming consistenet
* look how to adpt ur own namespace...call it bridge
* publish witha
* start the processing for each request on a thread if u want to handle many requests concurently. Move the mutex to the session itself.


Changes and Why:
#Web_server on_msg handler moved fom disptech:
	-the handler is no longer ()instance specific
	-I dont want to do websocket stuff from the BridgeManager (extracing the payload and finding the session by its handler)
	-its much cleaner to just make a call to the BrigeManager with the session_object and the json string.


#Nameing Convention:
	-Names of capabilities are gonna be named after the central data type they are managing (ex. SubscriptionCapability) and they can provide multiple operations.

#the cenrtalDataType instances list (ex Subscription_List). is owend and managed by the capability itself and passed to the processor by virtual inhertance. That means all the processors will be able to maintain the same list of data.
Processors could choose to impelment their own version of the dataObject and overwrite the generate_ and distory_ methods in the capability.
CapabilityManager will only acess this list when destrying a session (or processor. but that might not be needed)
The implementation of the basic processing of the dataObjet is in the operation named methods of the baseCapability class (ex. Subscription_capability.susbscribe()). Processors my override that behaviore if they wish to give the capability it a differnet semantic.

#the other option is to maintain the list on the CapabilityManager's side. That basically means that all the basic operations semantic and behavior will be coded in an operation named method in the manager (ex. CapabilityManager::subscibe()). The processors::operation() will only be called when generating_  an instace of the dataObject to get the overridden dataObjectType. and in ditsroying_ to destroy and processor specefic relation to that dataObject instance.

#Shared Namespace between clinets. In our approach each topic has a unique name in the globale topic namspace and has one subscibtion instance. In each Subscription instance there could be mulitble clients subscrbing and for each multiple requests.
(takecare of the maping now a SubscriptionObject could have multiple identical requests but for differnet clients. The mapping is only unique by client&&request_ID).
what do i need to do is:
	-have multiple requests per client (with unique id for that client)
	-



CHECK:

	-what throttle rate and queuelenght on the JS side


Questions:
	-what if the frequency that the topic changes at is very high. then we will congest the network with trafice while it might not be importent at all to (if the publishing rate is high)
	-Do i need to mutex fawkes::clock?


	_________________________________________________

	-->Make a until/Protocol that contain all the msg formats and proper serializer for them





WESBSESSIOTN:

So now i am thinkiinng about how to implement the websession closing event
Option 1: centralized and all the way from the close handler to the (Manager) toeach of the capabilites each capability propagates the even to the all owened objects and they  (like Subscription) and they manage the session closing and deleting it from the list!!
Fine but there is a lot of indirection in between
And since tim had said that its poor design to jum a level when ur trying to go bach then I will satrt propagating from where ever i started propagating the on_msg() [either inside the websession itself of starting with the web_server]

Option 2: Let the handler be inside the websession itsefl and destroy that object.Now how do we tell other objects that has a pointer to that that it no longer exists. A solution would be to check each time ur trying to use that object if it is still valid and then delete it if not. This means there are points in time where i will have a reffrece to an empty session and that is a bit scary.

there is an idea that i can not quite formulate though. to have some form of central entity that manages this...So the objects will tell that entity that they have this session handler and when the session is closed an event fires all overthe places where this handler is registered ....Relitivly easy since u can make a pure virtual class that any one that has a session has to implement..this class has a punsh of sessions that know how to and when its closed in the sesison. it calles all instances that has this session




After Descution:
register the one on_close_handler() to the session itself and give the session the ability to register close_handlers that it can propagate to when it fires.

Moving from this approach i think i will keep also the on_msg handler  within the session and call the bridge manager from there Or even just regesiter the incoming and a handler() [but then i need to keed track of hdl to get the right session]

the question is then what happens when there is no more subscription in this object.
One solution is to propagate the event back to the Manager and let it delete it from the list [which means that i will need to delete an active subscription, hence create a shared ptr that u have from within subscription. rm the shared_ptr from the subscription list and then it will also destoried when u get out of scope]

another way is to have the closing event firing to the manager since it is the one that will delete the subsciption anyway. And the manager propagates this event to all the subscription it has

hmmm...in this direction it means everytime there is a new session (how would i know that) i register the CPM as a close_handler in the sesison

make the register the close handler from subscription that means that u have to get the event back to the owning mnger once u need to delete urself



THREADING:
first try. 2 threads expected. One  that comes generated on the server to handle session and another with events coming on the bb_listener.
Will make mainlly 2 mutex 1 to lock for any session related operations. and another for Subscription base
	//Problem: if u lock the session mutex at send a deadlock may arrise, If publish is called and Locked the subscription mutex
	//at the same time a request came on another thread, lockeing the session mutex with on_msg()..
	//Now when publish tries to send it will wait for the mutex and
	//one solution is to unlock the subscription mutex right before sending
[This wont work. What if i closed a session while another is publishing on it.if u unlock before u send the could mean that the session will be terminated and ereasd from the the map before and the publish it will not longer be there at this point]

	//another is to make sure the msg wont lock the whole tim the request is beeing processed by starting the processing on another //thread
	//allowing msgs to be processed more frequesntly. But that means that u need to have Mutex for bridge_manager->incoming to allow only one
	//thread to do the processing from there on. Or make sure that u have mutex all in Capability and Capability managers


So i want to go for the second solution then. but that does not really solve the close sitution.ie, What if i close the session while i am publishing. The session mutex is locked and the subscription mutex will be called when u want to terminate the sesison. So,I wont be able to tereminate coz the publish locked the subsrciption and i wont be able to send cos the closed locked the session

So..On_msg should process stuff in a a differnt thread. as well as on_close.u can even delete the session from the server and just let the terminate propagate that on a differnt thread. That means i will be able to get the hell out of the handlers and unlock the session. and send could be called. and worst case senario in this case is that  u send to sessions that went out of scope for one publish then terminate them


|I think i will go for that. all that time and i am not even sure how many threads could be called from the server....What is the server is thread safe...What if i dont have to care about the handlers or the sending synq. this means i only have to care for my data and bridge stuff...For this u need to take a big look within the websocketpp and that is my next step....For now all i want is to have a working version of it even with all this confusion




BUG ON termination: (solved)
Description: when u refresh the session the whole thing craches
Analysis: after analysis i found that the session was recognozed and a new session mutiple times after it was added the first time with results in calling of terminate more than once for the same subscriber.

FOUND IT: so the bug was generated coz each time u have a request u create a new subscription object  and add a request to it (which means the session terminate call back will also be registered to the session).
Shorlt after u will call subsume on that session from ..Which calls add request on the correct subscription object and the tmpSubscription object goes out of scope..but the termination call back was not deleted from the sessions.... it will be called when u try to terminate

Solution:
 *only register the termination call back if the subscription object was active
 *make sure u de register all sessions when finializing which should be in subsum  (this is crusial)...but how would i do that..I only have the subscription object and i need to find out which callbacks are equal to it

Basically either make sure that the subscription object out lives all registered sessions. Or deregsiter all the sessions call backs on finilazations


In only one subscription active analogy it is doable to insure that the session handler wont be regsitered unless this is the one active subscription. But that does not explicitly state the problem anywhere so that other developers could account for it. It just hides it in the between the lines which i find a little less reusable.

Finding the terminated subscriptionm obejct and delete its handlers sounds like a better idea for me.

To do this i have to change the way that i am storing call backs for effciantcey ...
Map it to ...:
	topic_id : could be a good idea coz in fact i need one terminate to be mapped to one subscription object. In this approach actually i dont have to care about derigstring a handler. Once another one is registered it replaces the old one.. I like this but it means i always have to have a unique name (somthing like the _prefixed_topic_name) in all the other capabilites that will be implemented for all the other

	unique_id: for subscriptions (but this will mean i have to do the same with all other capabilites)


	To look on how u got here check the stashed  version





	LOG:

	4/March/2016
	so started again after a long pause so that would be a good chance to refactor some stuff that does not make sence coz i have a new eye on things now.
	State of the run is that is could accept as many new sessions and requests..First terminattion of the sessions happend nicely. yet when u refresh the second time it craches with stacktrace

	After outputting
[2016-03-04 11:00:19] [control] Control frame received with opcode 8
11:00:19.189882 stderr: [2016-03-04 11:00:19] [fatal] handle_read_frame error: websocketpp.transport:7 (End of File)


	#0  fawkes::Mutex::lock (this=0x0)
    at /home/mgomaa/fawkes-robotino/fawkes/src/libs/core/threading/mutex.cpp:92
#1  0x00007ffff7daa750 in fawkes::MutexLocker::MutexLocker (this=0x7fffea2cfe20, mutex=<optimized out>,
    initially_lock=<optimized out>)
    at /home/mgomaa/fawkes-robotino/fawkes/src/libs/core/threading/mutex_locker.cpp:109
#2  0x00007fffea5d0a96 in Subscription::terminate_session_handler (this=0x7fffe001e088, session=
    std::shared_ptr (count 7, weak 1) 0x7fffe00240e8)
    at /home/mgomaa/fawkes-robotino/src/plugins/webtools-bridge/subscription_capability.cpp:272
#3  0x00007fffea5d2521 in operator() (a1=..., p=<optimized out>, this=<optimized out>)
    at /usr/include/boost/bind/mem_fn_template.hpp:165
#4  operator()<boost::_mfi::mf1<void, Subscription, std::shared_ptr<WebSession> >, boost::_bi::list1<std::shared_ptr<WebSession>&> > (a=<synthetic pointer>, f=..., this=<optimized out>)
    at /usr/include/boost/bind/bind.hpp:313
#5  operator()<std::shared_ptr<WebSession> > (a1=..., this=<optimized out>)
    at /usr/include/boost/bind/bind_template.hpp:32
#6  boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void, boost::_mfi::mf1<void, Subscription, std::shared_ptr<WebSession> >, boost::_bi::list2<boost::_bi::value<Subscription*>, boost::arg<1> > >, void, std::shared_ptr<WebSession> >::invoke (function_obj_ptr=..., a0=...)
    at /usr/include/boost/function/function_template.hpp:153
#7  0x00007fffea5c5f51 in operator() (a0=..., this=0x7fffea2cff20)
    at /usr/include/boost/function/function_template.hpp:767
#8  WebSession::terminate (this=0x7fffe00240e8)
    at /home/mgomaa/fawkes-robotino/src/plugins/webtools-bridge/web_session.cpp:102
#9  0x00007fffea5a086b in Web_server::on_close (this=0x7fffe400c658,
    hdl=std::weak_ptr (count 14, weak 9) 0x7fffe0017d30)
    at /home/mgomaa/fawkes-robotino/src/plugins/webtools-bridge/Web_server.cpp:108
#10 0x00007fffea5a0636 in operator()<std::weak_ptr<void>, void> (__object=<optimized out>,
    this=<optimized out>) at /usr/include/c++/4.8.3/functional:601
#11 __call<void, std::weak_ptr<void>&&, 0ul, 1ul> (__args=<optimized out>, this=<optimized out>)
    at /usr/include/c++/4.8.3/functional:1296
#12 operator()<std::weak_ptr<void>, void> (this=<optimized out>)
    at /usr/include/c++/4.8.3/functional:1355
#13 std::_Function_handler<void (std::weak_ptr<void>), std::_Bind<std::_Mem_fn<void (Web_server::*)(std::weak_ptr<void>)> (Web_server*, std::_Placeholder<1>)> >::_M_invoke(std::_Any_data const&, std::weak_ptr<void>) (__functor=..., __args#0=...) at /usr/include/c++/4.8.3/functional:2071
#14 0x00007fffea5a74c1 in std::function<void (std::weak_ptr<void>)>::operator()(std::weak_ptr<void>) const (this=this@entry=0x7fffe0018778, __args#0=std::weak_ptr (count 14, weak 9) 0x7fffe0017d30)
    at /usr/include/c++/4.8.3/functional:2471
#15 0x00007fffea5aa57d in websocketpp::connection<websocketpp::config::asio>::handle_terminate (
    this=0x7fffe0017d30, tstat=<optimized out>, ec=...)
    at /usr/include/websocketpp/impl/connection_impl.hpp:1540
#16 0x00007fffea5ab7bd in websocketpp::transport::asio::connection<websocketpp::config::asio::transport_config>::handle_async_shutdown(std::shared_ptr<boost::asio::basic_deadline_timer<boost::posix_time::ptime, boost::asio::time_traits<boost::posix_time::ptime>, boost::asio::deadline_timer_service<boost::posix_time::ptime, boost::asio::time_traits<boost::posix_time::ptime> > > >, std::function<void (std::error_code const&)>, boost::system::error_code const&) (this=0x7fffe0017d30,
    shutdown_timer=std::shared_ptr (count 4, weak 0) 0x7fffe0024b88, callback=..., ec=...)
    at /usr/include/websocketpp/transport/asio/connection.hpp:1100
#17 0x00007fffea5a9401 in _M_call<std::shared_ptr<websocketpp::transport::asio::connection<websocketpp::config::asio::transport_config> >&, std::shared_ptr<boost::asio::basic_deadline_timer<boost::posix_time::ptime, boost::asio::time_traits<boost::posix_time::ptime>, boost::asio::deadline_timer_service<boost::posi




New Bug:

When trying mutiple Subscribtions requests fast..crash with backtrace
#0  0x0000003af7a8636a in strlen () from /lib64/libc.so.6
#1  0x0000003afbabfd25 in std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) () from /lib64/libstdc++.so.6
#2  0x00007ffff793c7b7 in fawkes::BlackBoardInterfaceManager::readers (this=this@entry=0x705d30,
    uid="Laser360Interface::Laser colli")
    at /home/mgomaa/fawkes-robotino/fawkes/src/libs/blackboard/internal/interface_manager.cpp:694
#3  0x00007ffff793cb36 in fawkes::BlackBoardInterfaceManager::list_all (this=0x705d30)
    at /home/mgomaa/fawkes-robotino/fawkes/src/libs/blackboard/internal/interface_manager.cpp:555
#4  0x00007fff8bdd6867 in BridgeBlackBoardProcessor::subscribe (this=0x7ffec4011dc8,
    prefixed_topic_name=..., id="subscribe:/blackboard/Laser360Interface::Laser colli:4",
    compression="none", throttle_rate=0, queue_length=0, fragment_size=0, session=
    std::shared_ptr (count 8, weak 1) 0x7ffed8007188)
    at /home/mgomaa/fawkes-robotino/src/plugins/webtools-bridge/blackboard_processor.cpp:123
#5  0x00007fff8bdce8d9 in SubscriptionCapabilityManager::subscribe (this=this@entry=0x7ffec4023b58,
    bridge_prefix="blackboard", topic_name="/blackboard/Laser360Interface::Laser colli",
    id="subscribe:/blackboard/Laser360Interface::Laser colli:4", compression="none",
    throttle_rate=throttle_rate@entry=0, queue_length=queue_length@entry=0,
    fragment_size=fragment_size@entry=0, session=std::shared_ptr (count 8, weak 1) 0x7ffed8007188)
    at /home/mgomaa/fawkes-robotino/src/plugins/webtools-bridge/subscription_capability_manager.cpp:158
#6  0x00007fff8bdd0a07 in SubscriptionCapabilityManager::handle_message (this=0x7ffec4023b58, d=...,
    session=std::shared_ptr (count 8, weak 1) 0x7ffed8007188)
    at /home/mgomaa/fawkes-robotino/src/plugins/webtools-bridge/subscription_capability_manager.cpp:124
#7  0x00007fff8bdcb3f6 in BridgeManager::incoming (this=0x7ffec40223d8,
    json="{\"op\":\"subscribe\",\"id\":\"subscribe:/blackboard/Laser360Interface::Laser colli:4\",\"type\":\"std_msgs/String\",\"topic\":\"/blackboard/Laser360Interface::Laser colli\",\"compression\":\"none\",\"throttle_rate\":0,\"qu"..., session=std::shared_ptr (count 8, weak 1) 0x7ffed8007188)
    at /home/mgomaa/fawkes-robotino/src/plugins/webtools-bridge/bridge_manager.cpp:32
#8  0x00007fff8bda8fb5 in Web_server::on_message (this=0x7ffec4023e58, hdl=..., web_msg=...)
    at /home/mgomaa/fawkes-robotino/src/plugins/webtools-bridge/Web_server.cpp:130
#9  0x00007fff8bda37bd in operator()<std::weak_ptr<void>, std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager> >, void> (__object=<optimized out>,
    this=<optimized out>) at /usr/include/c++/4.8.3/functional:601
#10 __call<void, std::weak_ptr<void>&&, std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager> >&&, 0ul, 1ul, 2ul> (__args=<optimized out>,
    this=<optimized out>) at /usr/include/c++/4.8.3/functional:1296
#11 operator()<std::weak_ptr<void>, std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager> >, void> (this=<optimized out>)
    at /usr/include/c++/4.8.3/functional:1355
#12 std::_Function_handler<void (std::weak_ptr<void>, std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager> >), std::_Bind<std::_Mem_fn<void (Web_server::*)(std::weak_ptr<void>, std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager> >)> (Web_server*, std::_Placeholder<1>, std::_Placeholder<2>)> >::_M_invoke(std::_Any_data const&, std::weak_ptr<void>, std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager> >) (__functor=..., __args#0=..., __args#1=...)
    at /usr/include/c++/4.8.3/functional:2071
#13 0x00007fff8bdc09a8 in operator() (__args#1=..., __args#0=..., this=0x7ffec4025098)
    at /usr/include/c++/4.8.3/functional:2471
#14 websocketpp::connection<websocketpp::config::asio>::handle_read_frame (this=0x7ffec4024550, ec=...,
    bytes_transferred=2445) at /usr/include/websocketpp/impl/connection_impl.hpp:983
#15 0x00007fff8bdac865 in operator() (__args#1=2445, __args#0=..., this=0x7ffec4024e80)
    at /usr/include/c++/4.8.3/functional:2471
