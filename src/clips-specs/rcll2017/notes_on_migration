Note on old clips agent (rcll2017) migration into clips-executive


Migration Road Map:
	1- Translate old agents Steps and their corresponding worldmodel effects into Actions
		Map into existing Action / Create new Actions if needed
	2- Translate Tasks into Plans
	3- Create Goals
	4- static goal sequence for testing
	5- Dynamic Goal Reasoning
	6- Multiple Agents Coordination
	7- WorldModel Sync across agents


Task names:
	clear-bs
	clear-cs
	clear-rs
	fill-cap
	fill-rs
	produce-c0
	produce-cx
	add-first-ring
	add-additional-ring
	deliver
	discard-unknown
	exploration-catch-up


Tasks Life Cycle:
	proposed
		Rules of production.clp suggest tasks based on the
		state of the world model and the priorities of the task.
		The proposed task wont have a robot specified explicitly.
		Yet, each robot is responsible of their proposed tasks. (A
		task could only be executed on the robot it was proposed on)

		Binding of the parameters is also done here and the Task
		is given a name, local-id and the "needed-task-lock"s
		that could later be used for coordination are asserted.

		During proposal, the needed-task-lock is asserted with an Action and a Place.
		The combination of those names "action~place"  will be used as resource for
		coordination and task locking.
		Possible Actions in production.clp:
			Action FILL_CAP  		in TASK [fill-cap]			place: ?cs

			Action GET-PROD  		in TASK [clear-cs]			place: ?cs
								[clear-rs]			place: ?rs
								[deliver]			place: ?cs

			Action PREFILL-RS 		in TASK [fill-rs]			place: ?rs

			Action PROD_CAP 		in TASK [produce-c0]			place: ?cs
								[produce-cx]			place: ?cs

			Action PROD_RING		in TASK [add-first-ring]		place: ?rs
								[add-additional-ring]		place: ?rs
			Action DELIVER 			in TASK [deliver]			place: ?ds

	asked
		All resources needed has been requested from the lock master
	rejected

	ordered

	running

	finished

	failed

Steps Names:
	get-from-shelf
	insert
	get-output
	get-base
	find-tag
	instruct-mps
	discard
	drive-to wait-for-rs
	wait-for-output
	acquire-lock
	release-lock



Mapping: From Steps to Actions
	Step drive to 			--> (:action  move-wp-get
							Or
							--> (:action  move-wp-put

		Those actions u need to to/from locations to be an mps and its side
		Be careful, To be able to go to any random location or a waiting point
		something else needs to come in moiled.



	Step get-from-shelf  	--> (:action wp-get-shelf
									(?r - robot ?cc - cap-carrier ?m - mps ?spot - shelf-spot)

		BEHAVIOR: The main difference in behaviour is that the step includes in it the calculation of which
		shelf position should be used.. so it is more dynamic. While the Action needs this information
		to be determined before calling the action.
		Also the workpeice id in the Action needs to be there before the action calling. Whereas in
		the step a 'product' with random id is generated upon completion


	Step-get							--> (:action wp-get

	Step-insert-start 					1-> (:action wp-put
												(?r - robot ?from - location ?from-side - mps-side ?to - mps)

		BEHAVIOR: of being already at the mps (for example when picking up from shelf) is left out.
		I can have another action for that later on or a pass it as a parameter.
		(ie, driving smoothly in a sliding move from the shelf to the input field)

		In the old agent, depending on the Task that this 'Insert' Step was part of, effects to the world model would
		differ. Those are models by the following exogenous actions.
		[TASK: fill-cap]  				2-> (:action cs-retrieve-cap
		[TASK: add-first-ring 			2-> (:action rs-mount-ring1
			|add-additional-ring]		2-> (:action rs-mount-ring2
											&&  (:action rs-mount-ring3
				What is still missing in the modelling here is that checking and consuming of
				the bases needed for that ring. Need to do this soon. But for a first C0
				production that is enough

		[TASK produce-c0|produce-cx] 	2-> (:action cs-mount-cap
		[TASK deliver] 					2-> (:action  fulfill-order-c0
										2-> (:action  fulfill-order-c1
										2-> (:action  fulfill-order-c2
										2-> (:action  fulfill-order-c3
