;---------------------------------------------------------------------------
;  fixed-sequence.clp - Goal expander for RCLL goals
;
;  Created: Tue 09 Jan 2018 17:03:31 CET
;  Copyright  2018  Mostafa Gomaa <gomaa@kbsg.rwth-aachen.de>
;  Licensed under GPLv2+ license, cf. LICENSE file in the doc directory.
;---------------------------------------------------------------------------

; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU Library General Public License for more details.
;
; Read the full text in the LICENSE.GPL file in the doc directory.
;

(defrule goal-expander-send-beacon-signal
  ?p <- (goal (mode DISPATCHED) (id ?parent-id))
  ?g <- (goal (id ?goal-id) (class SEND-BEACON) (mode SELECTED)
              (parent ?parent-id))
=>
  (assert
    (plan (id BEACONPLAN) (goal-id ?goal-id))
    (plan-action (id 1) (plan-id BEACONPLAN) (goal-id ?goal-id)
      (action-name send-beacon)))
  (modify ?g (mode EXPANDED))
)

(defrule goal-expander-refill-shelf
  ?p <- (goal (mode DISPATCHED) (id ?parent) (class PRODUCE-CPARENT))
  ?g <- (goal (id ?goal-id) (class REFILL-SHELF) (mode SELECTED)
              (params mps ?mps ) (parent ?parent-id))
  (wm-fact (key domain fact wp-cap-color args? wp ?wp col ?col))
  (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
  =>
  (assert
    (plan (id REFILL-PLAN) (goal-id ?goal-id))
    (plan-action (id 1) (plan-id REFILL-PLAN) (goal-id ?goal-id)
                 (action-name lock) (param-values ?mps))
    (plan-action (id 2) (plan-id REFILL-PLAN) (goal-id ?goal-id)
                 (action-name refill-shelf) (skiller (remote-skiller ?robot))
                 (param-values ?mps LEFT (sym-cat CC- (random-id)) ?col))
    (plan-action (id 3) (plan-id REFILL-PLAN) (goal-id ?goal-id)
                 (action-name refill-shelf) (skiller (remote-skiller ?robot))
                 (param-values ?mps MIDDLE (sym-cat CC- (random-id)) ?col))
    (plan-action (id 4) (plan-id REFILL-PLAN) (goal-id ?goal-id)
                 (action-name refill-shelf) (skiller (remote-skiller ?robot))
                 (param-values ?mps RIGHT (sym-cat CC- (random-id)) ?col))
    (plan-action (id 5) (plan-id REFILL-PLAN) (goal-id ?goal-id)
                  (action-name unlock) (param-values ?mps)))
  
  (modify ?g (mode EXPANDED))
)


(defrule goal-expander-get-base-to-fill-rs
 ?p <- (goal (mode DISPATCHED) (id ?parent) (class PRODUCE-CPARENT))
 ?g <- (goal (mode SELECTED) (parent ?parent) (id ?goal-id)
             (class GET-BASE-TO-FILL-RS)
             (params robot ?robot
                      bs ?bs
                      bs-side ?bs-side
                      base-color ?base-color
                      wp ?spawned-wp
       ))
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 =>
 (assert
  (plan (id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id))
  (plan-action (id 1) (plan-id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name go-wait)
        (skiller (remote-skiller ?robot))
        (param-names r from from-side to)
        (param-values ?robot ?curr-location ?curr-side (wait-pos ?bs ?bs-side)))
  (plan-action (id 2) (plan-id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name location-lock)
        (param-values ?bs ?bs-side))
  (plan-action (id 3) (plan-id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name move)
        (skiller (remote-skiller ?robot))
        (param-names r from from-side to to-side )
        (param-values ?robot (wait-pos ?bs ?bs-side) WAIT ?bs ?bs-side))
  (plan-action (id 4) (plan-id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name lock)
        (param-values ?bs))
  (plan-action (id 5) (plan-id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name prepare-bs)
        (skiller (remote-skiller ?robot))
        (param-values ?bs ?bs-side ?base-color))
  (plan-action (id 6) (plan-id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name bs-dispense)
        (skiller (remote-skiller ?robot))
        (param-values ?robot ?bs ?bs-side ?spawned-wp ?base-color))
  (plan-action (id 7) (plan-id  GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name wp-get)
        (skiller (remote-skiller ?robot))
        (param-names r wp m side)
        (param-values ?robot ?spawned-wp ?bs ?bs-side))
  (plan-action (id 8) (plan-id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name unlock)
        (param-values ?bs))
  (plan-action (id 9) (plan-id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name location-unlock)
        (param-values ?bs ?bs-side))
  (plan-action (id 10) (plan-id GET-BASE-TO-FILL-RS-PLAN) (goal-id ?goal-id)
        (action-name go-wait)
        (skiller (remote-skiller ?robot))
        (param-names r from from-side to)
        (param-values ?robot ?bs ?bs-side (wait-pos ?bs ?bs-side)))
 )
 (modify ?g (mode EXPANDED))
)


(defrule goal-expander-discard-wp
 ?p <- (goal (mode DISPATCHED) (id ?parent))
 ?g <- (goal (id ?goal-id) (class DISCARD-WP) (mode SELECTED)
             (parent ?parent)
             (params robot ?robot
                    wp ?wp
             ))
  =>
  (assert
    (plan (id DISCARD-WP-PLAN) (goal-id ?goal-id))
    (plan-action (id 1) (plan-id DISCARD-WP-PLAN) (goal-id ?goal-id)
          (action-name wp-discard)
          (skiller (remote-skiller ?robot))
          (param-names r cc )
          (param-values ?robot ?wp))
  )
  (modify ?g (mode EXPANDED))
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defrule goal-expander-enter-field
  ?g <- (goal (id ?goal-id) (mode SELECTED) (class ENTER-FIELD)
              (params r ?robot team-color ?team-color))
 (wm-fact (key domain fact mps-type args? m ?mps t ?t))
 (wm-fact (key domain fact mps-team args? m ?mps col ?team-color))
=>
(bind ?planid (sym-cat ENTER-FIELD-PLAN- (gensym*)))
  (assert
    (plan (id ?planid) (goal-id ?goal-id))
    (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
                                 (action-name enter-field)
                                 (skiller (remote-skiller ?robot))
                                 (param-names r team-color)
                                 (param-values ?robot ?team-color)))
  (modify ?g (mode EXPANDED))
)

(defrule goal-expander-produce-c0-mount-cap-deliver
 ?p <- (goal (mode DISPATCHED) (id ?parent) (class PRODUCE-C0) (params order ?order bs-color ?base-color cs-color ?cap-color wp ?wp bs ?bs cs ?cs ds ?ds))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class MOUNT-CAP-DELIVER) (mode SELECTED))

 (wm-fact (key domain fact cs-buffered args? m ?cs col ?cap-color))
 (wm-fact (key domain fact mps-side-free args? m ?cs side OUTPUT))

 (wm-fact (key domain fact holding args? r ?robot wp ?wp))
 
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact entered-field args? r ?robot))

(not(goal (params robot ?robot $?rest-params)))
 =>
      (bind ?planid (sym-cat PRODUCE-C0-MOUNT-CAP-DELIVER-PLAN- (gensym*)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs INPUT))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT ?cs INPUT))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?wp ?cs))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-cs)
              (skiller (remote-skiller ?robot))
              (param-values ?cs MOUNT_CAP))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
              (action-name cs-mount-cap)
              (skiller (remote-skiller ?robot))
              (param-values ?cs ?wp ?cap-color))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs INPUT (wait-pos ?cs INPUT)))
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?cs INPUT))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT (wait-pos ?cs OUTPUT)))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs OUTPUT))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs OUTPUT) WAIT ?cs OUTPUT))
        (plan-action (id 11) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?wp ?cs OUTPUT))
        (plan-action (id 12) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs OUTPUT (wait-pos ?cs OUTPUT)))
        (plan-action (id 13) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?cs OUTPUT))
        (plan-action (id 14) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?cs OUTPUT) WAIT (wait-pos ?ds INPUT)))
        (plan-action (id 15) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?ds INPUT))
        (plan-action (id 16) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?ds INPUT) WAIT ?ds INPUT))
        (plan-action (id 17) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?wp ?ds))
        (plan-action (id 18) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-ds)
              (skiller (remote-skiller ?robot))
              (param-values ?ds ?order))
        (plan-action (id 19) (plan-id ?planid) (goal-id ?goal-id)
              (action-name fulfill-order-c0)
              (skiller (remote-skiller ?robot))
              (param-values ?order ?wp ?ds INPUT ?base-color ?cap-color))
        (plan-action (id 20) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?ds INPUT (wait-pos ?ds INPUT)))
        (plan-action (id 21) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?ds INPUT))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot))
)

(defrule goal-expander-base-wait
 ?p <- (goal (mode DISPATCHED) (id ?parent))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class GET-BASE-WAIT) (mode SELECTED) (params bs-color ?base-color wp ?wp bs ?bs wait-pos ?wait-pos wait-side ?wait-side))
 (wm-fact (key domain fact entered-field args? r ?robot))
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact can-hold args? r ?robot))
 (not(goal (params robot ?robot $?rest-params)))
 =>
      (bind ?planid (sym-cat GET-BASE-WAIT-PLAN- (gensym*)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name spawn-wp)
              (param-values ?wp ?robot))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?curr-location ?curr-side (wait-pos ?bs INPUT)))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?bs INPUT))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side )
              (param-values ?robot (wait-pos ?bs INPUT) WAIT ?bs INPUT))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-bs)
              (skiller (remote-skiller ?robot))
              (param-names m side bc)
              (param-values ?bs INPUT ?base-color))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
              (action-name bs-dispense)
              (skiller (remote-skiller ?robot))
              (param-names r m side wp basecol)
              (param-values ?robot ?bs INPUT ?wp ?base-color))
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?wp ?bs INPUT))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?bs INPUT (wait-pos ?bs INPUT)))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock)
              (param-values ?bs INPUT))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?bs INPUT) WAIT (wait-pos ?wait-pos ?wait-side)))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot))
)

(defrule goal-expander-buffer-cs
 ?p <- (goal (mode DISPATCHED) (id ?parent))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class BUFFER-CS) (mode SELECTED) (params cs-color ?cap-color cs ?cs))

 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact entered-field args? r ?robot))
 (wm-fact (key domain fact can-hold args? r ?robot))
 (not(goal (params robot ?robot $?rest-params)))

 (wm-fact (key domain fact wp-on-shelf args? wp ?cc m ?cs spot ?shelf-spot))
 (wm-fact (key domain fact wp-cap-color args? wp ?cc col ?cap-color))
 (not (goal (class BUFFER-CS)(params robot ?some-robot wp ?cc)))
 =>
      (bind ?planid (sym-cat BUFFER-CS-PLAN- (gensym*)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?curr-location ?curr-side (wait-pos ?cs INPUT)))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs INPUT))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT ?cs INPUT))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get-shelf)
              (skiller (remote-skiller ?robot))
              (param-names r cc m spot)
              (param-values ?robot ?cc ?cs ?shelf-spot))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?cc ?cs))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-cs)
              (skiller (remote-skiller ?robot))
              (param-values ?cs RETRIEVE_CAP))
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
              (action-name cs-retrieve-cap)
              (skiller (remote-skiller ?robot))
              (param-values ?cs ?cc ?cap-color))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs INPUT (wait-pos ?cs INPUT)))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
             (action-name location-unlock) (param-values ?cs INPUT))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT (wait-pos ?cs OUTPUT)))
        (plan-action (id 11) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs OUTPUT))
        (plan-action (id 12) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs OUTPUT) WAIT ?cs OUTPUT))
        (plan-action (id 13) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?cc ?cs OUTPUT))
        (plan-action (id 14) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-discard)
              (skiller (remote-skiller ?robot))
              (param-names r cc )
              (param-values ?robot ?cc))
        (plan-action (id 15) (plan-id ?planid)(goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs OUTPUT (wait-pos ?cs OUTPUT)))
        (plan-action (id 16) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?cs OUTPUT))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot wp ?cc))
)

(defrule goal-expander-produce-c1-mount-cap-deliver
 ?p <- (goal (mode DISPATCHED) (id ?parent) (class PRODUCE-C1) (params order ?order bs-color ?base-color ring1-color ?ring1-color cs-color ?cap-color wp ?wp bs ?bs cs ?cs ds ?ds rs1 ?rs1))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class MOUNT-CAP-DELIVER-C1) (mode SELECTED))

 (wm-fact (key domain fact cs-buffered args? m ?cs col ?cap-color))
 (wm-fact (key domain fact mps-side-free args? m ?cs side OUTPUT))

 (wm-fact (key domain fact holding args? r ?robot wp ?wp))
 (wm-fact (key domain fact wp-ring1-color args? wp ?wp col ?ring1-color))
 
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact entered-field args? r ?robot))

 (not(goal (params robot ?robot $?rest-params)))
 =>
      (bind ?planid (sym-cat PRODUCE-C1-MOUNT-CAP-DELIVER-PLAN- (gensym*)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs INPUT))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT ?cs INPUT))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?wp ?cs))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-cs)
              (skiller (remote-skiller ?robot))
              (param-values ?cs MOUNT_CAP))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
              (action-name cs-mount-cap)
              (skiller (remote-skiller ?robot))
              (param-values ?cs ?wp ?cap-color))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs INPUT (wait-pos ?cs INPUT)))
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?cs INPUT))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT (wait-pos ?cs OUTPUT)))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs OUTPUT))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs OUTPUT) WAIT ?cs OUTPUT))
        (plan-action (id 11) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?wp ?cs OUTPUT))
        (plan-action (id 12) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs OUTPUT (wait-pos ?cs OUTPUT)))
        (plan-action (id 13) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?cs OUTPUT))
        (plan-action (id 14) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?cs OUTPUT) WAIT (wait-pos ?ds INPUT)))
        (plan-action (id 15) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?ds INPUT))
        (plan-action (id 16) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?ds INPUT) WAIT ?ds INPUT))
        (plan-action (id 17) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?wp ?ds))
        (plan-action (id 18) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-ds)
              (skiller (remote-skiller ?robot))
              (param-values ?ds ?order))
        (plan-action (id 19) (plan-id ?planid) (goal-id ?goal-id)
              (action-name fulfill-order-c1)
              (skiller (remote-skiller ?robot))
              (param-values ?order ?wp ?ds INPUT ?base-color ?cap-color ?ring1-color))
        (plan-action (id 20) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?ds INPUT (wait-pos ?ds INPUT)))
        (plan-action (id 21) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?ds INPUT))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot ?order bs-color ?base-color ring1-color ?ring1-color cs-color ?cap-color wp ?wp bs ?bs cs ?cs ds ?ds rs1 ?rs1))
)

(defrule goal-expander-buffer-rs
 ?p <- (goal (mode DISPATCHED) (id ?parent))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class BUFFER-RS) (mode SELECTED) (params bs ?bs rs ?rs for ?ring-num))
 (wm-fact (key domain fact entered-field args? r ?robot))
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact can-hold args? r ?robot))
 (not(goal (params robot ?robot $?rest-params)))
 =>
      (bind ?planid (sym-cat BUFFER-RS-PLAN- (gensym*)))
      (bind ?fwp (sym-cat WP- (random-id)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name spawn-wp)
              (param-values ?fwp ?robot))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?curr-location ?curr-side (wait-pos ?bs INPUT)))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?bs INPUT))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side )
              (param-values ?robot (wait-pos ?bs INPUT) WAIT ?bs INPUT))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-bs)
              (skiller (remote-skiller ?robot))
              (param-names m side bc)
              (param-values ?bs INPUT BASE_BLACK))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
              (action-name bs-dispense)
              (skiller (remote-skiller ?robot))
              (param-names r m side wp basecol)
              (param-values ?robot ?bs INPUT ?fwp BASE_BLACK))
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?fwp ?bs INPUT))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?bs INPUT (wait-pos ?bs INPUT)))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock)
              (param-values ?bs INPUT))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?bs INPUT) WAIT (wait-pos ?rs INPUT)))
        (plan-action (id 11) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?rs INPUT))
        (plan-action (id 12) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?rs INPUT) WAIT ?rs INPUT))
        (plan-action (id 13) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put-slide-cc)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?fwp ?rs))
        (plan-action (id 14) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock)
              (param-values ?rs INPUT))
        (plan-action (id 15) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?rs INPUT (wait-pos ?rs INPUT)))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot bs ?bs rs ?rs for ?ring-num))
)

(defrule goal-expander-mount-ring1
 ?p <- (goal (mode DISPATCHED) (id ?parent))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class MOUNT-RING1) (mode SELECTED) (params ring1-color ?ring1-color wp ?wp rs ?rs wait-pos ?wait-pos wait-side ?wait-side))

 (not(goal (parent ?parent) (class BUFFER-RS) (params robot ?some-robot bs ?some-bs rs ?rs for ONE)))
 (not(goal (parent ?parent) (class BUFFER-RS) (params bs ?some-bs rs ?rs for ONE)))

 (wm-fact (key domain fact mps-side-free args? m ?rs side INPUT))
 (wm-fact (key domain fact mps-side-free args? m ?rs side OUTPUT))
 (wm-fact (key domain fact rs-ring-spec args? m ?rs r ?ring1-color rn ?bases-needed))

 (wm-fact (key domain fact holding args? r ?robot wp ?wp))
 
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact entered-field args? r ?robot))

 (not(goal (params robot ?robot $?rest-params)))
 =>
      (bind ?planid (sym-cat MOUNT-RING1-PLAN- (gensym*)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?curr-location ?curr-side (wait-pos ?rs INPUT)))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
            (action-name location-lock)
            (param-values ?rs INPUT))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
            (action-name move)
            (skiller (remote-skiller ?robot))
            (param-names r from from-side to to-side )
            (param-values ?robot (wait-pos ?rs INPUT) WAIT ?rs INPUT))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
            (action-name wp-put)
            (skiller (remote-skiller ?robot))
            (param-names r wp m)
            (param-values ?robot ?wp ?rs))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
            (action-name prepare-rs)
            (skiller (remote-skiller ?robot))
            (param-values ?rs ?ring1-color ?bases-needed))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
            (action-name rs-mount-ring1)
            (skiller (remote-skiller ?robot))
            (param-values ?rs ?wp ?ring1-color ?bases-needed))   
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
            (action-name go-wait)
            (skiller (remote-skiller ?robot))
            (param-names r from from-side to)
            (param-values ?robot ?rs INPUT (wait-pos ?rs INPUT)))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
            (action-name location-unlock)
            (param-values ?rs INPUT))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?rs INPUT) WAIT (wait-pos ?rs OUTPUT)))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?rs OUTPUT))
        (plan-action (id 11) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?rs OUTPUT) WAIT ?rs OUTPUT))
        (plan-action (id 12) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?wp ?rs OUTPUT))
        (plan-action (id 13) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?rs OUTPUT (wait-pos ?rs OUTPUT)))
        (plan-action (id 14) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock)
              (param-values ?rs OUTPUT))
        (plan-action (id 15) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?rs OUTPUT) WAIT (wait-pos ?wait-pos ?wait-side)))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot ring1-color ?ring1-color wp ?wp rs ?rs wait-pos ?wait-pos wait-side ?wait-side))
)

(defrule goal-expander-mount-ring2
 ?p <- (goal (mode DISPATCHED) (id ?parent))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class MOUNT-RING2) (mode SELECTED) (params ring1-color ?ring1-color ring2-color ?ring2-color wp ?wp rs ?rs wait-pos ?wait-pos wait-side ?wait-side))

 (not(goal (parent ?parent) (class BUFFER-RS) (params robot ?some-robot bs ?some-bs rs ?rs for TWO)))
 (not(goal (parent ?parent) (class BUFFER-RS) (params bs ?some-bs rs ?rs for TWO)))

 (wm-fact (key domain fact mps-side-free args? m ?rs side INPUT))
 (wm-fact (key domain fact mps-side-free args? m ?rs side OUTPUT))
 (wm-fact (key domain fact rs-ring-spec args? m ?rs r ?ring2-color rn ?bases-needed))

 (wm-fact (key domain fact wp-ring1-color args? wp ?wp col ?ring1-color))
 (wm-fact (key domain fact holding args? r ?robot wp ?wp))
 
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact entered-field args? r ?robot))

 (not(goal (params robot ?robot $?rest-params)))
 =>
      (bind ?planid (sym-cat MOUNT-RING2-PLAN- (gensym*)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?curr-location ?curr-side (wait-pos ?rs INPUT)))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
            (action-name location-lock)
            (param-values ?rs INPUT))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
            (action-name move)
            (skiller (remote-skiller ?robot))
            (param-names r from from-side to to-side )
            (param-values ?robot (wait-pos ?rs INPUT) WAIT ?rs INPUT))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
            (action-name wp-put)
            (skiller (remote-skiller ?robot))
            (param-names r wp m)
            (param-values ?robot ?wp ?rs))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
            (action-name prepare-rs)
            (skiller (remote-skiller ?robot))
            (param-values ?rs ?ring2-color ?bases-needed))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
            (action-name rs-mount-ring2)
            (skiller (remote-skiller ?robot))
            (param-values ?rs ?wp ?ring2-color ?ring1-color ?bases-needed))   
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
            (action-name go-wait)
            (skiller (remote-skiller ?robot))
            (param-names r from from-side to)
            (param-values ?robot ?rs INPUT (wait-pos ?rs INPUT)))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
            (action-name location-unlock)
            (param-values ?rs INPUT))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?rs INPUT) WAIT (wait-pos ?rs OUTPUT)))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?rs OUTPUT))
        (plan-action (id 11) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?rs OUTPUT) WAIT ?rs OUTPUT))
        (plan-action (id 12) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?wp ?rs OUTPUT))
        (plan-action (id 13) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?rs OUTPUT (wait-pos ?rs OUTPUT)))
        (plan-action (id 14) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock)
              (param-values ?rs OUTPUT))
        (plan-action (id 15) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?rs OUTPUT) WAIT (wait-pos ?wait-pos ?wait-side)))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot ring1-color ?ring1-color ring2-color ?ring2-color wp ?wp rs ?rs wait-pos ?wait-pos wait-side ?wait-side))
)

(defrule goal-expander-mount-ring3
 ?p <- (goal (mode DISPATCHED) (id ?parent))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class MOUNT-RING3) (mode SELECTED) (params ring1-color ?ring1-color ring2-color ?ring2-color ring3-color ?ring3-color wp ?wp rs ?rs wait-pos ?wait-pos wait-side ?wait-side))

 (not(goal (parent ?parent) (class BUFFER-RS) (params robot ?some-robot bs ?some-bs rs ?rs for THREE)))
 (not(goal (parent ?parent) (class BUFFER-RS) (params bs ?some-bs rs ?rs for THREE)))

 (wm-fact (key domain fact mps-side-free args? m ?rs side INPUT))
 (wm-fact (key domain fact mps-side-free args? m ?rs side OUTPUT))
 (wm-fact (key domain fact rs-ring-spec args? m ?rs r ?ring3-color rn ?bases-needed))

 (wm-fact (key domain fact wp-ring1-color args? wp ?wp col ?ring1-color))
 (wm-fact (key domain fact wp-ring2-color args? wp ?wp col ?ring2-color))
 (wm-fact (key domain fact holding args? r ?robot wp ?wp))
 
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact entered-field args? r ?robot))

 (not(goal (params robot ?robot $?rest-params)))
 =>
      (bind ?planid (sym-cat MOUNT-RING2-PLAN- (gensym*)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?curr-location ?curr-side (wait-pos ?rs INPUT)))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
            (action-name location-lock)
            (param-values ?rs INPUT))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
            (action-name move)
            (skiller (remote-skiller ?robot))
            (param-names r from from-side to to-side )
            (param-values ?robot (wait-pos ?rs INPUT) WAIT ?rs INPUT))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
            (action-name wp-put)
            (skiller (remote-skiller ?robot))
            (param-names r wp m)
            (param-values ?robot ?wp ?rs))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
            (action-name prepare-rs)
            (skiller (remote-skiller ?robot))
            (param-values ?rs ?ring3-color ?bases-needed))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
            (action-name rs-mount-ring3)
            (skiller (remote-skiller ?robot))
            (param-values ?rs ?wp ?ring3-color ?ring1-color ?ring2-color ?bases-needed))   
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
            (action-name go-wait)
            (skiller (remote-skiller ?robot))
            (param-names r from from-side to)
            (param-values ?robot ?rs INPUT (wait-pos ?rs INPUT)))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
            (action-name location-unlock)
            (param-values ?rs INPUT))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?rs INPUT) WAIT (wait-pos ?rs OUTPUT)))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?rs OUTPUT))
        (plan-action (id 11) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?rs OUTPUT) WAIT ?rs OUTPUT))
        (plan-action (id 12) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?wp ?rs OUTPUT))
        (plan-action (id 13) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?rs OUTPUT (wait-pos ?rs OUTPUT)))
        (plan-action (id 14) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock)
              (param-values ?rs OUTPUT))
        (plan-action (id 15) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?rs OUTPUT) WAIT (wait-pos ?wait-pos ?wait-side)))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot ring1-color ?ring1-color ring2-color ?ring2-color ring3-color ?ring3-color wp ?wp rs ?rs wait-pos ?wait-pos wait-side ?wait-side))
)

(defrule goal-expander-produce-c2-mount-cap-deliver
 ?p <- (goal (mode DISPATCHED) (id ?parent) (class PRODUCE-C2) (params order ?order bs-color ?base-color ring1-color ?ring1-color ring2-color ?ring2-color cs-color ?cap-color wp ?wp bs ?bs cs ?cs ds ?ds rs1 ?rs1 rs2 ?rs2))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class MOUNT-CAP-DELIVER-C2) (mode SELECTED))

 (wm-fact (key domain fact cs-buffered args? m ?cs col ?cap-color))
 (wm-fact (key domain fact mps-side-free args? m ?cs side OUTPUT))

 (wm-fact (key domain fact holding args? r ?robot wp ?wp))
 (wm-fact (key domain fact wp-ring1-color args? wp ?wp col ?ring1-color))
 (wm-fact (key domain fact wp-ring2-color args? wp ?wp col ?ring2-color))
 
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact entered-field args? r ?robot))

 (not(goal (params robot ?robot $?rest-params)))
 =>
      (bind ?planid (sym-cat PRODUCE-C2-MOUNT-CAP-DELIVER-PLAN- (gensym*)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs INPUT))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT ?cs INPUT))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?wp ?cs))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-cs)
              (skiller (remote-skiller ?robot))
              (param-values ?cs MOUNT_CAP))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
              (action-name cs-mount-cap)
              (skiller (remote-skiller ?robot))
              (param-values ?cs ?wp ?cap-color))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs INPUT (wait-pos ?cs INPUT)))
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?cs INPUT))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT (wait-pos ?cs OUTPUT)))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs OUTPUT))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs OUTPUT) WAIT ?cs OUTPUT))
        (plan-action (id 11) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?wp ?cs OUTPUT))
        (plan-action (id 12) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs OUTPUT (wait-pos ?cs OUTPUT)))
        (plan-action (id 13) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?cs OUTPUT))
        (plan-action (id 14) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?cs OUTPUT) WAIT (wait-pos ?ds INPUT)))
        (plan-action (id 15) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?ds INPUT))
        (plan-action (id 16) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?ds INPUT) WAIT ?ds INPUT))
        (plan-action (id 17) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?wp ?ds))
        (plan-action (id 18) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-ds)
              (skiller (remote-skiller ?robot))
              (param-values ?ds ?order))
        (plan-action (id 19) (plan-id ?planid) (goal-id ?goal-id)
              (action-name fulfill-order-c2)
              (skiller (remote-skiller ?robot))
              (param-values ?order ?wp ?ds INPUT ?base-color ?cap-color ?ring1-color ?ring2-color))
        (plan-action (id 20) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?ds INPUT (wait-pos ?ds INPUT)))
        (plan-action (id 21) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?ds INPUT))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot order ?order bs-color ?base-color ring1-color ?ring1-color ring2-color ?ring2-color cs-color ?cap-color wp ?wp bs ?bs cs ?cs ds ?ds rs1 ?rs1 rs2 ?rs2))
)

(defrule goal-expander-produce-c3-mount-cap-deliver
 ?p <- (goal (mode DISPATCHED) (id ?parent) (class PRODUCE-C3) (params order ?order bs-color ?base-color ring1-color ?ring1-color ring2-color ?ring2-color ring3-color ?ring3-color cs-color ?cap-color wp ?wp bs ?bs cs ?cs ds ?ds rs1 ?rs1 rs2 ?rs2 rs3 ?rs3))
 ?g <- (goal (id ?goal-id) (parent ?parent) (class MOUNT-CAP-DELIVER-C3) (mode SELECTED))

 (wm-fact (key domain fact cs-buffered args? m ?cs col ?cap-color))
 (wm-fact (key domain fact mps-side-free args? m ?cs side OUTPUT))

 (wm-fact (key domain fact holding args? r ?robot wp ?wp))
 (wm-fact (key domain fact wp-ring1-color args? wp ?wp col ?ring1-color))
 (wm-fact (key domain fact wp-ring2-color args? wp ?wp col ?ring2-color))
 (wm-fact (key domain fact wp-ring3-color args? wp ?wp col ?ring3-color))
 
 (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
 (wm-fact (key domain fact entered-field args? r ?robot))

 (not(goal (params robot ?robot $?rest-params)))
 =>
      (bind ?planid (sym-cat PRODUCE-C3-MOUNT-CAP-DELIVER-PLAN- (gensym*)))
      (assert
        (plan (id ?planid) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs INPUT))
        (plan-action (id 2) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT ?cs INPUT))
        (plan-action (id 3) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?wp ?cs))
        (plan-action (id 4) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-cs)
              (skiller (remote-skiller ?robot))
              (param-values ?cs MOUNT_CAP))
        (plan-action (id 5) (plan-id ?planid) (goal-id ?goal-id)
              (action-name cs-mount-cap)
              (skiller (remote-skiller ?robot))
              (param-values ?cs ?wp ?cap-color))
        (plan-action (id 6) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs INPUT (wait-pos ?cs INPUT)))
        (plan-action (id 7) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?cs INPUT))
        (plan-action (id 8) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?cs INPUT) WAIT (wait-pos ?cs OUTPUT)))
        (plan-action (id 9) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?cs OUTPUT))
        (plan-action (id 10) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?cs OUTPUT) WAIT ?cs OUTPUT))
        (plan-action (id 11) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-get)
              (skiller (remote-skiller ?robot))
              (param-names r wp m side)
              (param-values ?robot ?wp ?cs OUTPUT))
        (plan-action (id 12) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?cs OUTPUT (wait-pos ?cs OUTPUT)))
        (plan-action (id 13) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?cs OUTPUT))
        (plan-action (id 14) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot (wait-pos ?cs OUTPUT) WAIT (wait-pos ?ds INPUT)))
        (plan-action (id 15) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-lock)
              (param-values ?ds INPUT))
        (plan-action (id 16) (plan-id ?planid) (goal-id ?goal-id)
              (action-name move)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to to-side)
              (param-values ?robot (wait-pos ?ds INPUT) WAIT ?ds INPUT))
        (plan-action (id 17) (plan-id ?planid) (goal-id ?goal-id)
              (action-name wp-put)
              (skiller (remote-skiller ?robot))
              (param-names r wp m)
              (param-values ?robot ?wp ?ds))
        (plan-action (id 18) (plan-id ?planid) (goal-id ?goal-id)
              (action-name prepare-ds)
              (skiller (remote-skiller ?robot))
              (param-values ?ds ?order))
        (plan-action (id 19) (plan-id ?planid) (goal-id ?goal-id)
              (action-name fulfill-order-c3)
              (skiller (remote-skiller ?robot))
              (param-values ?order ?wp ?ds INPUT ?base-color ?cap-color ?ring1-color ?ring2-color ?ring3-color))
        (plan-action (id 20) (plan-id ?planid) (goal-id ?goal-id)
              (action-name go-wait)
              (skiller (remote-skiller ?robot))
              (param-names r from from-side to)
              (param-values ?robot ?ds INPUT (wait-pos ?ds INPUT)))
        (plan-action (id 21) (plan-id ?planid) (goal-id ?goal-id)
              (action-name location-unlock) (param-values ?ds INPUT))
	  )
        (modify ?g (mode EXPANDED)(params robot ?robot order ?order bs-color ?base-color ring1-color ?ring1-color ring2-color ?ring2-color ring3-color ?ring3-color cs-color ?cap-color wp ?wp bs ?bs cs ?cs ds ?ds rs1 ?rs1 rs2 ?rs2 rs3 ?rs3))
)

(defrule goal-expander-go-wait
  "Move to a waiting position."
   ?p <- (goal (mode DISPATCHED) (id ?parent))
   ?g <- (goal (id ?goal-id) (class GO-WAIT) (mode SELECTED) (parent ?parent))
   (wm-fact (key domain fact self args? r ?robot))
   (wm-fact (key domain fact at args? r ?robot m ?curr-location side ?curr-side))
   =>
   (assert
        (plan (id GO-WAIT-PLAN) (goal-id ?goal-id))
        (plan-action (id 1) (plan-id GO-WAIT-PLAN) (goal-id ?goal-id)
                     (action-name go-wait)
                     (skiller(remote-skiller ?robot))
                     (param-names r from from-side to)
                     (param-values ?robot ?curr-location ?curr-side START INPUT))
   )
   (modify ?g (mode EXPANDED))
)


