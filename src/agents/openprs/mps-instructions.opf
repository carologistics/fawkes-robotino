;---------------------------------------------------------------------------
;  mps-instructions.opf - OpenPRS OP file for RCll2017 openprs-agent
;
;  Created: Tue Jan 24 15:43:00 2017
;  Copyright  2017  Mostafa Gomaa [gomaa@kbsg.rwth-aachen.de]
;  Licensed under GPLv2+ license, cf. LICENSE file
;---------------------------------------------------------------------------

;ToDo: Change the loop to a more reliable. None blocking way. 
;		Also might add time-outs and so on..Right now if the machine. 
;		Also Handle the Machine Broken more gracefully  (right now the intention just successes to prevent waiting)

(
	(defop mps-instruction-base-station
		:invocation ( !(instruct-mps machine $bs-name side $side color $color) )
		:context( 	(machine $bs-name "BS" $bs-state $bs-prepared $bs-zone $bs-pose $bs-loaded-with)
				 	(team-color $team-color)
				  	(peer-id private $peer-id)
				)
		:body( 

			(! (= @bs-inst (pb-create "llsf_msgs.PrepareInstructionBS")))
			(! (pb-set-field @bs-inst "side" $side))
			(! (pb-set-field @bs-inst "color" $color))

			(! (send-instruction $bs-name (val @bs-inst)))
			
			(^ (instruction-sent-ack $bs-name )) ;TODO: Add time out here and fail the intention if it was timed
			(~> (instruction-sent-ack $bs-name ))
			)

		:documentation "Send the Prepare instruction once to the BS"
 		)


 		(defop mps-instruction-cap-station
 			:invocation ( !(instruct-mps machine $cs-name operation $operation) )
 			:context( 	(machine $cs-name "CS" $cs-state $cs-prepared $cs-zone $cs-pose $cs-loaded-with)
				  	 	(team-color $team-color)
				  		(peer-id private $peer-id)
				)
 			:body(
 				(! (= @cs-inst (pb-create "llsf_msgs.PrepareInstructionCS")))
				(! (pb-set-field @cs-inst "operation" $operation)) ;TODO check if the operation is allowed before sending it

				(! (send-instruction $cs-name (val @cs-inst)))

				(^ (instruction-sent-ack $cs-name))
				(~> (instruction-sent-ack $cs-name))
 				)

			:documentation "Send the Prepare instruction once to the CS"
 			)


 		(defop mps-instruction-common-send-instruction
 			:invocation( !( send-instruction $mps-name $mps-inst) )
 			:context( 	(machine $mps-name $mps-type $mps-state $mps-prepared $mps-zone $mps-pose $mps-loaded-with)
 						;s(MEMQ $mps-state (. "PREPARED" "PROCESSING" "READY-AT-OUTPUT" "BROKEN" .))
				  	 	(team-color $team-color)
				  		(peer-id private $peer-id)
				)
 			:body(
 				(! (= @instruction (pb-create "llsf_msgs.PrepareMachine")))
				(! (pb-set-field @instruction "team_color" $team-color))
				(! (pb-set-field @instruction "machine" $mps-name ))

				(if (? (= $mps-type "BS"))
					(! (pb-set-field @instruction "instruction_bs" $mps-inst )))

				(if (? (= $mps-type "DS"))
					(! (pb-set-field @instruction "instruction_ds" $mps-inst )))

				(if (? (= $mps-type "RS"))
					(! (pb-set-field @instruction "instruction_rs" $mps-inst )))

				(if (? (= $mps-type "CS"))
					(! (pb-set-field @instruction "instruction_cs" $mps-inst )))
				
				;Todo: raplce by a neater way 
				(while (?	(& (machine $mps-name $mps-type @new-state @prepared @zone @pose @loaded-with)
							 	(~ (= (val @new-state) "PREPARED"))
								(~ (= (val @new-state) "PROCESSING"))
								(~ (= (val @new-state) "READY-AT-OUTPUT")) 
								(~ (= (val @new-state) "BROKEN"))))
					(! (pb-broadcast $peer-id @instruction))
					(! (print "Broadcasting..."))
					)
				;This to make sure the unification is done correctly. If the while condition is not enough to bind the $new-state. The neater way should resolve that
				(? (machine $mps-name $mps-type @new-state @prepared @zone @pose @loaded-with))

				(if (? (= "BROKEN" @new-state))
					(! (printf (FORMAT "Instruction failed..machine %s is %s \n" $mps-name @new-state) ))
					;(fail) For now let it send the ack till I make the sending neater
					else 
					(! (printf (FORMAT "The instruction sent successfully..machine %s is %s \n" $mps-name @new-state) ))
					)
 				
 				(=> (instruction-sent-ack $mps-name))
 				
 				)

			:effects  ()
 			:documentation "Embed the PrepareInstructionXS msg for an mps in a PrepareMachine msg and Broadcast it"
 			)


	)