;---------------------------------------------------------------------------
;  lock.opf - OpenPRS OP file for RCll2017 openprs-agent
;
;  Created: Tue Mar 14 09:43:00 2017
;  Copyright  2017  Mostafa Gomaa [gomaa@kbsg.rwth-aachen.de]
;  Licensed under GPLv2+ license, cf. LICENSE file
;---------------------------------------------------------------------------
(

	(defop lock-acquire
		:invocation (! (lock ACCEPT $robot-name (place $mps-name $side) $priority))
		:context 	(  );TODO: check if resource is a place in case u want to enable locking of other things
		:body(
			;Allowed sides
			(? (MEMQ $side (. "input" "output" .)))
			(if (? (= $side "input" ))
				(! (= $place (string-cat $mps-name "-I")))
				else 
				(! (= $place (string-cat $mps-name "-O")))
				)
			(=>  (lock GET $robot-name $place $priority))
			(^ (|| 	(lock ACCEPT $robot-name $place @priority)
					(lock REFUSE $robot-name $place @priority)))
					;TODO: Maybe also timeout that u didnt get an answer and see what went wrong.
			
			(if (? (lock REFUSE $robot-name $place @priority))
				(! (step (go-to-waiting-point machine $mps-name side $side)))
				)

			(^ (lock ACCEPT $robot-name $place @priority));TODO: Maybe also timeout or look for other tasks
			)
		)


	(defop lock-release
		:invocation	(timer "beacon" $last-sec $last-usec $seq) 
		:setting	(setting "release-distance" $release-distance)
		:context( 	(agent-name $agent-name)
		            (lock ACCEPT $agent-name $resource $priority)
		            (lock-in-use $resource $res-xpos $res-ypos)
		            (agent-pose $agent-name $agent-xpos $agent-ypos)
		         )
		:body (
		       (! (CAL_SQUARE_DISTANCE $agent-xpos $agent-ypos $res-xpos $res-ypos $res))
		       
		       (! (= $release-distance-sqr (* $release-distance $release-distance)))
		       (if (? (> $res $release-distance-sqr))
		       (! (printf (FORMAT "Releaseing Lock: %s %s %d %d %d %d\n" $agent-name $resource $agent-xpos $agent-ypos $res-xpos $res-ypos)))
		       	(=> (lock RELEASE $agent-name $resource $priority))
		       )
		)
		:documentation "Checks every certain amount of time if still needs the lock or not
		                if not the lock release fact is asserted to the database"
	)

;TODO: Allow to have any thing as a resource ...if u have the string passed and then u can convert it to and from atom
;that would allow u to always have this deuality and u can handle things just like u want..Lets play with that later 
;work with this $place thing for testing

;/////////////////////
;MASTER LOCK HANDLING
;////////////////////

	(defop receive-LockMessage-Master
		:invocation (protobuf-msg "llsf_msgs.LockMessage" $comp-id $msg-type $rcvd-via $rcvd-at-sec $rcvd-at-usec
		                        $rcvd-from-host $rcvd-from-port $client-type $client-id $msg)
		:context ((master-of LOCKING $robot-name))
		:setting (setting "robot-name" $robot-name)
		:body(
			(! (= $agent (pb-field-value $msg "agent" )) )
			(! (= $type (pb-field-value $msg "type")) )
			(! (= $resource (pb-field-value $msg "resource")) )
			(if (? (pb-has-field $msg "priority"))
				(! (= $priority (pb-field-value $msg "priority")) )
				)

			(if (? (~ (BOUNDP $priority)))
				(! (= $priority 0))
				)

			(=> (lock $type $agent $resource $priority))
			)
      	)

    (defop lock-process-requests-and-releases-and-send-LockMessage
    	:invocation ( timer "beacon" $last-sec $last-usec $seq )
    	:context( 	(master-of LOCKING $robot-name)
    	 			(peer-id private $peer-id)
    	 			)
    	:setting(setting "robot-name" $robot-name)
    	:body(
    		(! (= $lock-release-list (n-all-list (. $agent $resource .) (lock RELEASE $agent $resource $priority))))
    		(if (? (< 0 (length $lock-release-list) ))

	    		(! (= @agent-list (car $lock-release-list)) )
	    		(! (= @resource-list (cadr $lock-release-list)) )
	    		(while (? (~ (null @agent-list)))
	    			(! (= @agent (car @agent-list)))
	    			(! (= @agent-list (cdr @agent-list)))
	    			(! (= @resource (car @resource-list)))
	    			(! (= @resource-list (cdr @resource-list))) 

	    			(? (lock RELEASE (val @agent) (val @resource) @some-priority))    			
	    			;Delete any lock for this agent and resource
	    			(while (? (lock @some-type (val @agent) (val @resource) @some-priority))
	    				(~> (lock (val @some-type) (val @agent) (val @resource) @some-priority))  
	    				)
	    			(if (? (~ (= $robot-name (val @agent))))
	    				(=> (lock RELEASE_RVCD @agent @resource @some-priority))
	    				)
	    			)
    			
    			)

   ;  		(! (= $lock-accept-list (n-all-list (. $agent $resource .) (lock ACCEPT $agent $resource $priority))))
			; (if (? (< 0 (length $lock-accept-list))) 
	    			
			; 	(! (= @agent-list (car $lock-accept-list)) )
	  ;   		(! (= @resource-list (cadr $lock-accept-list)) )
	  ;   		(while (? (~ (null @agent-list)))
	  ;   			(! (= @agent (car @agent-list)))
	  ;   			(! (= @agent-list (cdr @agent-list)))
	  ;   			(! (= @resource (car @resource-list)))
	  ;   			(! (= @resource-list (cdr @resource-list))) 

			; 		(while (? (& 	(lock @type (val @agent) (val @resource) @some-priority)
			; 						(|| (= (val @type) GET)
			; 							(= (val @type) REFUSE)
			; 							)))
	  ;   				(~> (lock (val @type) (val @agent) (val @resource) @some-priority)) 
	  ;   				)
			; 		)
			; 	)

    		(! (= $lock-get-list (n-all-list (. $agent $resource .) (lock GET $agent $resource $priority))))
    		(if (? (< 0 (length $lock-get-list))) 

	    		(! (= @agent-list (car $lock-get-list)) )
	    		(! (= @resource-list (cadr $lock-get-list)) )
	    		;(! (print @agent-list))
	    		;(! (print @resource-list))
	    		(while (? (~ (null @agent-list)))
	    			; (! (print "i am in the loop"))
	    			(! (= @agent (car @agent-list)))
	    			(! (= @agent-list (cdr @agent-list)))
	    			(! (= @resource (car @resource-list)))
	    			(! (= @resource-list (cdr @resource-list))) 

	    			(? (lock GET (val @agent) (val @resource) @priority))    				
	    			(if (? (lock ACCEPT @locking-agent (val @resource) @some-priority))
	    				(if (? (= (val @locking-agent) (val @agent)) )
	    					;Just Remove the GETs and REFUSEs if already ACCEPTED 
	    					(~> (lock GET 		(val @agent) (val @resource) @priority)) 	
	    					(~> (lock REFUSE 	(val @agent) (val @resource) @priority)) 	
	    					else
	    					(=> (lock REFUSE @agent @resource (val @priority) ))
			    			(if (? (~ (= (val @agent) $robot-name)))
			    				(~> (lock GET (val @agent) (val @resource) @priority)) 	)
	    					)
	    				else
	    				(=> (lock ACCEPT @agent @resource (val @priority))) 	
	    				)
	    			)
	    		)

    		;Send-LockMessage-Master
			(! (= $lock-complete-list (n-all-list (. $any-type $agent $resource .) (lock $any-type $agent $resource $priority))))
			(if (? (< 0 (length $lock-complete-list))) 
	    			
				(! (= @type-list (car $lock-complete-list)))
				(! (= @agent-list (cadr $lock-complete-list)))
				(! (= @resource-list (caddr $lock-complete-list)))
				
				(while (? (~ (null @agent-list)))
					(! (= @type (car @type-list)))
					(! (= @agent (car @agent-list)))
					(! (= @resource (car @resource-list)))
					(! (= @type-list (cdr @type-list)))
					(! (= @agent-list (cdr @agent-list)))
					(! (= @resource-list (cdr @resource-list)))
					
					(if (? (|| 	(= (val @type) ACCEPT)
								(= (val @type) REFUSE)
								(= (val @type) RELEASE_RVCD)))
						(! (= @msg (pb-create "llsf_msgs.LockMessage")))
						(! (pb-set-field @msg "type" @type))
						(! (pb-set-field @msg "agent" @agent))
						(! (pb-set-field @msg "resource" @resource))
						; (! (print @agent))
						(! (pb-broadcast $peer-id @msg))
						(! (pb-destroy @msg))

						(if (? (= (val @type) RELEASE_RVCD) )
							(~> (lock RELEASE_RVCD (val @agent) (val @resource) @priority))
							)

						)
					)
				)

			)
    	)

;/////////////////////////
;NONE MASTER LOCK HANDLING
;/////////////////////////

	(defop receive-LockMessage-none-Master
		:invocation (protobuf-msg "llsf_msgs.LockMessage" $comp-id $msg-type $rcvd-via $rcvd-at-sec $rcvd-at-usec
		                        $rcvd-from-host $rcvd-from-port $client-type $client-id $msg)
		:context ( 	(agent-name $robot-name)
					(master-of LOCKING $master-name)
					(~ (= $robot-name $master-name)))
		:body(

			(! (= $agent (pb-field-value $msg "agent" )) )
			(if (? (= $agent $robot-name ))				

				(! (= $type (pb-field-value $msg "type")) )
				(! (= $resource (pb-field-value $msg "resource")) )
				(if (? (pb-has-field $msg "priority"))
					(! (= $priority (pb-field-value $msg "priority")) )
					)
				(if (? (~ (BOUNDP $priority)))
					(! (= $priority 0))
					)

				(if (? (|| 	(= $type RELEASE_RVCD)
							(= $type ACCEPT)
							(= $type REFUSE)
							))
					(=> (lock $type $agent $resource $priority))
					)
				)
			)

		)


	(defop send-lockMessage-none-Master
		:invocation( timer "beacon" $last-sec $last-usec $seq )
		:context( 	(agent-name $robot-name)
					(master-of LOCKING $master-name)
					(~ (= $robot-name $master-name))
					(peer-id private $peer-id))
		:body(

			(! (= $lock-RELEASE_RVCD-list (n-all-list (. $resource .) (lock RELEASE_RVCD $robot-name $resource $priority )) ))
			(if (? (< 0 (length $lock-RELEASE_RVCD-list))) 

				(! (= @resource-list (car $lock-RELEASE_RVCD-list)))
				
				(while ( ? (~ (null @resource-list)))
					(! (= @resource (car @resource-list)))
					(! (= @resource-list (cdr @resource-list)))
					
					(while (? (lock @any-type $robot-name (val @resource) @some-priority))
	    				(~> (lock (val @any-type) $robot-name (val @resource) @some-priority)) )
					)
			)


			(! (= $lock-ACCEPT-list (n-all-list (. $resource .) (lock ACCEPT $robot-name $resource $priority))))
			(if (? (< 0 (length $lock-ACCEPT-list))) 
	    			
				(! (= @resource-list (car $lock-ACCEPT-list)))
				
				(while (? (~ (null @resource-list)))
					(! (= @resource (car @resource-list)))
					(! (= @resource-list (cdr @resource-list)))
					
					(while (? (& 	(lock @type $robot-name (val @resource) @some-priority)
									(|| (= (val @type) GET)
										(= (val @type) REFUSE)
										)))
	    				(~> (lock (val @type) $robot-name (val @resource) @some-priority)) 
	    				)
					)
				)


			(! (= $lock-list (n-all-list (. $type $resource $priority .) (lock $type $robot-name $resource $priority )) ))
			(if (? (< 0 (length $lock-list))) 

				(! (= @type-list (car $lock-list)))
				(! (= @resource-list (cadr $lock-list)))
				(! (= @priority-list (caddr $lock-list)))
				
				(while ( ? (~ (null @type-list)))
					(! (= @type (car @type-list)))
					(! (= @priority (car @priority-list)))
					(! (= @resource (car @resource-list)))
					(! (= @type-list (cdr @type-list)))
					(! (= @priority-list (cdr @priority-list)))
					(! (= @resource-list (cdr @resource-list)))
					
					(if (? (|| 	(= (val @type) GET)
								(= (val @type) RELEASE)))
						(! (= @msg (pb-create "llsf_msgs.LockMessage")))
						(! (pb-set-field @msg "type" (val @type)))
						(! (pb-set-field @msg "agent" $robot-name))
						(! (pb-set-field @msg "resource" (val @resource)))
						(! (pb-set-field @msg "priority"  (val @priority)))
						(! (pb-broadcast $peer-id @msg))
						(! (pb-destroy @msg))
						)
					)
				)
			)
		
		)

	
)