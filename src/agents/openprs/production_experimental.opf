;---------------------------------------------------------------------------
;  production_experimental.opf - OpenPRS OP file for RCll2017 openprs-agent
;
;  Created: Tue FEB 17 15:43:00 2017
;  Copyright  2017  Mostafa Gomaa [gomaa@kbsg.rwth-aachen.de]
;  Licensed under GPLv2+ license, cf. LICENSE file
;---------------------------------------------------------------------------
(

	(defop choose-goal-inmind
		:invocation( ! (choose-goal-inmind $c-type) )
		:context( 	(order $id $c-type $base-color $ring-colors $cap-color $quantity-requested $quantity-delivered $delivery-period-begin $delivery-period-end $delivery-gate)
					(machine $ds-name "DS" $ds-state $ds-prepared $ds-zone $ds-pose $ds-loaded-with)
					(master-of REASONING $agent)
					(agent-name $agent)
					(~ (choosing-goal-inmind))
					)
		:body(

			(! (start-critical-section))
			(=> (choosing-goal-inmind))
 			(! (kill-other-intentions))
 			(! (end-critical-section))
 			(! (print "Chooseing a Goal..."))


			(! (= $wp-base (base $base-color)))
			(! (= $wp-cap (cap $cap-color)))
			(! (= @wp-rings (rings NONE))) 

			(if (? (= 1 (LENGTH $ring-colors)))  (! (= @wp-rings (rings (car $ring-colors)))) )
			(if (? (= 2 (LENGTH $ring-colors)))  (! (= @wp-rings (rings (car $ring-colors) (cadr $ring-colors)))) )
			(if (? (= 3 (LENGTH $ring-colors)))  (! (= @wp-rings (rings (car $ring-colors) (cadr $ring-colors) (caddr $ring-colors)))) )
			
			;convert delevary gate to a string 
			;(! (= $delivery-gate-string (term-string-cat $delivery-gate)))

			(=> (goal-inmind (workpiece 0 (base $base-color) @wp-rings (cap $cap-color) (place $ds-name $delivery-gate)) ))
		)
		:effects ((~> (choosing-goal-inmind)))
	)


; (defop break-goal-needs
	; 	:invocation ( (goal-inmind (workpiece 0 $goal-base $goal-rings $goal-cap (place $ds-name $delivery-gate)))) )
	; 	:context () 
	; 	:body(

	; 			(? (machine $bs-name "BS" $bs-state $bs-prepared $bs-zone $bs-pose $bs-loaded-with))
	; 			(? (machine $ds-name "DS" $ds-state $ds-prepared $ds-zone $ds-pose $ds-loaded-with)) 
	; 			(? &(machine $cs-name "CS" $cs-state $cs-prepared $cs-zone $cs-pose $cs-loaded-with) 
	; 				(cap-station $cs-name $cap-color $loaded-status $caps-on-shelf)
	; 				(= $goal-cap (cap $cap-color)))

	; 			(if (? (= $goal-rings (rings none)))
	; 				else 
	; 				(if (? (= $rings (rings $first-ring-color)))
	; 					else
	; 					(if (? (= $rings (rings $first-ring-color $second-ring-color)))
	; 						else 
	; 						(if (? (= $rings (rings $first-ring-color $second-ring-color $third-ring-color))))
	; 						)
	; 					)
	; 				)

	; 		(if (? (~ (BOUNDP $first-ring-color)))
	; 			(? &	(machine $first-rs-name "RS" @rs-state @rs-prepared @rs-zone @rs-pose @rs-loaded-with) 
	; 					(ring-station $first-rs-name (avilible-colors @avilible-colors-list) @selected-color @bases-loaded)
	; 					(MEMQ $first-ring-color @avilible-colors-list) 
	; 			)

	; 		(if (? (~ (BOUNDP $second-ring-color)))
	; 			(? &	(machine $second-rs-name "RS" @rs-state @rs-prepared @rs-zone @rs-pose @rs-loaded-with) 
	; 					(ring-station $second-rs-name (avilible-colors @avilible-colors-list) @selected-color @bases-loaded)
	; 					(MEMQ $second-ring-color @avilible-colors-list) 
	; 			)

	; 		(if (? (~ (BOUNDP $third-ring-color)))
	; 			(? &	(machine $third-rs-name "RS" @rs-state @rs-prepared @rs-zone @rs-pose @rs-loaded-with) 
	; 					(ring-station $third-rs-name (avilible-colors @avilible-colors-list) @selected-color @bases-loaded)
	; 					(MEMQ $third-ring-color @avilible-colors-list) 
	; 			)

	; 		(=> (need (workpiece 0 $goal-base $goal-rings $goal-cap (place $cs-name "output")) for (workpiece 0 $goal-base $goal-rings $goal-cap (place $ds-name $delivery-gate)) ))

	; 		(=> (need (workpiece 0 $goal-base $goal-rings (cap none) (place $cs-name "input"))  for (workpiece 0 $goal-base $goal-rings $goal-cap (place $cs-name "output")) ))			
	; 		(=> (need (workpiece 0 $goal-base $goal-rings (cap none) (place "agent" "gripper")) for (workpiece 0 $goal-base $goal-rings $goal-cap (place $cs-name "input")) ))
	; 		(=> (need (cap-station $cs-name $cap-color CAP_LOADED @DONT_CARE-on-shelf))) 		for (workpiece 0 $goal-base $goal-rings $goal-cap (place $cs-name "input")) ))
	; 		)
	; 	)

)