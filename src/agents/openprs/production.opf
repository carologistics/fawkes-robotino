;---------------------------------------------------------------------------
;  production.opf - OpenPRS OP file for RCll2017 openprs-agent
;
;  Created: Tue Jan 17 15:43:00 2017
;  Copyright  2017  Mostafa Gomaa [gomaa@kbsg.rwth-aachen.de]
;  Licensed under GPLv2+ license, cf. LICENSE file
;---------------------------------------------------------------------------

(

	(defop produce-c0-imperative
		:invocation	(timer "beacon" $last-sec $last-usec $seq)
		:context(	(order $id c0 $base-color $ring-colors $cap-color $quantity-requested $quantity-delivered $delivery-period-begin $delivery-period-end $delivery-gate)
				 	(cap-station $cs-name $cap-color)
				 	(machine $bs-name "BS" $bs-state $bs-prepared $bs-zone $bs-pose $bs-loaded-with)
				 	(machine $cs-name "CS" $cs-state $cs-prepared $cs-zone $cs-pose $cs-loaded-with)
				 	(~ (= $cs-state BROKEN))
				 	(~ (= $cs-state DOWN))
					(peer-id private $peer-id)
				   	(team-color $team-color )
				   	(agent-state IDLE)
				   	)

		:body(
			(! (start-critical-section))
			(~> (agent-state IDLE))
			(! (kill-other-intentions))
			(! (end-critical-section))
			(! (print "Producing C0..."))

			(! (print "PRELOADING CAP STATION..."))
			(! (= $slot "LEFT")) 								;dynamically dertiermine which position. 
 			(! (get-product-from place $cs-name shelf $slot))
			(! (instruct-mps machine $cs-name operation RETRIEVE_CAP)) 
			(! (bring-product-to place $cs-name atmps $slot))
			(! (drive-to (string-cat $cs-name "-O")))
			(! (get-product-from place $cs-name side "output"))

			(! (print "FETHCHING THE BASE..."))
			(! (print (string-cat $bs-name "-I")))
			(! (drive-to (string-cat $bs-name "-I"))) ; todos, get the side from a fact that makes sure the active-side is updated
			; todo:get the lock
			(! (instruct-mps machine $bs-name side INPUT color $base-color ))
			(! (get-product-from place $bs-name side "input"))
			
			(! (print "INSETRING INTO CS..."))
			(! (drive-to (string-cat $cs-name "-I"))) 
			(! (instruct-mps machine $cs-name operation MOUNT_CAP))
			(! (bring-product-to place $cs-name))
			)


	:effects ()
	:documentation "A completly imparative way to produce the c0 product using only a single robot. 
					This is only an exemplary Op to test the water. It starts in response for a C0 order and assumes nothing else is happing on the feild
					No locks. No coordination and everything is hard coded"

	)














	)