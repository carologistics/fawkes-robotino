
;---------------------------------------------------------------------------
;  llsf2014.opf - OpenPRS OP file for LLSF2014 agent
;
;  Created: Mon Aug 25 13:20:02 2014
;  Copyright  2014  Tim Niemueller [www.niemueller.de]
;  Licensed under GPLv2+ license, cf. LICENSE file
;---------------------------------------------------------------------------

(

;(defop llsf2014-load-config
;  :invocation (agent-init)
;  :context()
;  :body (
;    (! (print "Loading configuration for LLSF2014 agent"))
;    (! (config-load-to-settings "/openprs-agent/llsf2014/"))
;  )
;  :documentation "Load setting for agent."
;)

(defop llsf2014-init
  :invocation (agent-init)
  :context ()
  :setting (& (setting "idle-looptime-sec" $ilt_sec) (setting "idle-looptime-usec" $ilt_usec)
	      (setting "peer-address" $peer-addr) (setting "peer-public-send-port" $peer-send-port)
	      (setting "peer-public-recv-port" $peer-recv-port))
  :body (
    (! (pb-setup))
    (! (pb-peer-create-local $peer-addr $peer-send-port $peer-recv-port @peer-id))
    ;(! (bb-open "SkillerInterface" "Skiller" BB-READ))
    (! (time-set-idle-looptime $ilt_sec $ilt_usec))
    (! (navgraph-load))
    ;(! (say "Agent loaded and ready to run"))
    (! (ppgoto "C-DS"))
    (! (print "LLSF2016 agent successfully initialized"))
  )
  :effects ((~> (agent-init)) (=> (peer-id public @peer-id)) (=> (agent-state IDLE)) )
)

(defop say
  :invocation (! (say $text))
  :call (say $text)
  :context ()
  :action (skill-call "say" "text" $text "wait" true)
  :documentation "Invoke skiller to synthesize given text as speech."
)

(defop ppgoto
  :invocation (! (ppgoto $place))
  :call (ppgoto $place)
  :action (skill-call "ppgoto" "place" $place)
  :documentation "go to a place"
)


(defop drive-to
  :invocation (! (drive-to $place))
  :call (dirve-to $place)
  :action (skill-call "drive_to" "place" $place)
  :documentation "Drive to a place"
)


(defop agent-print-skiller-iface
  :invocation (bb-data "type" "SkillerInterface" "id" "Skiller" "time" $t_sec $t_usec $data)
  :context (blackboard-interface "SkillerInterface" "Skiller" BB-READ)
  :body ((! (bb-print "SkillerInterface" "Skiller")))
)

)
