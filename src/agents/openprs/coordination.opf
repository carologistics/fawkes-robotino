;---------------------------------------------------------------------------
;  coordination.opf - OpenPRS OP file for RCll2017 openprs-agent
;
;  Created: Tue Jan 17 15:43:00 2017
;  Copyright  2017  Mostafa Gomaa [gomaa@kbsg.rwth-aachen.de]
;  Licensed under GPLv2+ license, cf. LICENSE file
;---------------------------------------------------------------------------
(

	(defop co--Master-Achieving-workpiece-Goal
		:invocation (! (achieve-workpiece $agent $workpiece))
		:context ( 	(~ 	(achieve-workpiece $agent @any-workpiece STARTED))
					(master-of REASONING $me)
					(agent-name $me)
					)		
		:body (	

				;(^ (precond)
				(! (= (workpiece $id $base $rings $cap $place)  $workpiece ))
				; (if (? (~ (BOUNDP $id)))
				; 	(! (= (workpiece 0 $base $rings $cap $place)  $workpiece-to-send))
				; 	)

				(! (printf (FORMAT "Achieveing Goal on %s REQUESTING ...\n" $agent)))
				(=> (achieve-workpiece $agent $workpiece REQUESTING))
				

				(^ ( ||	(achieve-workpiece $agent $workpiece STARTED)
						(achieve-workpiece $agent $workpiece FAILED)
						(achieve-workpiece $agent (workpiece @id $base $rings $cap $place)  SUCCEEDED)))
				;TODO: or timeout if no heartbeat for agent

				(if (? (achieve-workpiece $agent $workpiece STARTED))
					(! (printf (FORMAT "Achieveing Goal on %s STARTED ...\n" $agent)))
					)


				(^ ( ||	(achieve-workpiece $agent $workpiece FAILED)
						(achieve-workpiece $agent (workpiece @id $base $rings $cap $place)  SUCCEEDED)))

				(~> (achieve-workpiece $agent $workpiece REQUESTING))
				(~> (achieve-workpiece $agent $workpiece STARTED))

				(if (! 	(achieve-workpiece $agent $workpiece FAILED)) 
					(! (printf  (FORMAT "Achieving Workpiece: FAILED Achieving WP %s %s %s %s %s \n" $id $base $rings $cap $place)))
					(! (= 0 1));just fail the goal
					)
			)
		:documentation "Access point to the coordination by Master of reasoning Ops. Reacts on a posted ACHIEVE-WORKPIECE goal 
						(agent and workpiece are paramters of the goal). Issues the Achieve-Workpiece request (by asserting the
						corresponding fact). Waits till achieve-workpiece is either SUCCEEDED of FAILED. ie, blocks till the goal
						is either achieved or failed"
		)


	(defop co--on-Achieving-workpiece-Started
		:invocation (achieve-workpiece $agent (workpiece $id $base $rings $cap $place) STARTED) 
		:context (agent-name $agent)		
		:body (
				; (! (start-critical-section))
				; (! (kill-other-intentions))
				; (=> (achieve-workpiece $agent $workpiece STARTED))
				; (! (end-critical-section))
				(! (print "Achieving Goal Started..."))
				
				(if (? (~ (= $id 0)))
					(! (= $completed-id $id))
					)

				(if (! (workpiece $completed-id $base $rings $cap $place)) 
					(=> (achieve-workpiece $agent (workpiece $completed-id $base $rings $cap $place) SUCCEEDED))
					else
					(=> (achieve-workpiece $agent (workpiece $id $base $rings $cap $place) FAILED))
					(! (printf  (FORMAT "Achieving Workpiece: FAILED Achieving WP %s %s %s %s %s" $id $base $rings $cap $place)))
					)
			)
		:documentation " On the worker agent (slave) specified for achieving a wp. When the achieve-workpiece is started. Invokes 
						the necessary workpiece operation by posting the 'workpiece' goal carried in the achieve-workpiece fact that
						was started. updates the correct state transition for the achievement facts, depending if the workpiece goal 
						Recfails of succeeds"
		)


	;===========================================///////// AchieveMessage Handling \\\\\\\\\\======================================

	(defop co--forAll--receive-AchieveMessage
		:invocation (protobuf-msg "llsf_msgs.AchieveWorkpiece" $comp-id $msg-type $rcvd-via $rcvd-at-sec $rcvd-at-usec		                        
															$rcv-from-host $rcvd-from-port $client-type $client-id $msg)
		:context 	(agent-name $my-name)
		:body(

			(! (= $agent 					(pb-field-value $msg 		"agent" )) )
			(! (= $status 					(pb-field-value $msg 		"status")) )
			(if (? (pb-has-field 							$msg 		"sender_info"))
				(! (= $sender-info-msg 		(pb-field-value $msg 		"sender_info")) )
				(! (= $sender-name 			(pb-field-value $sender-info-msg	"name")) )
				(! (= $sender-role 			(pb-field-value $sender-info-msg	"reasoning_role")) )			
				)
			(! (= $wp-msg 					(pb-field-value $msg 		"workpiece")) )
			(! (= $base-color 				(pb-field-value $wp-msg 	"base_color")) )
			(! (= $place-msg 				(pb-field-value $wp-msg 	"place")) )
			(! (= $name 					(pb-field-value $place-msg 	"name")) )
			(! (= $feature		 			(pb-field-value $place-msg 	"feature")) )
			(if (? 	( & (= $feature "gate")	(pb-has-field 	$place-msg 	"gate")))
				(! (= $gate 				(pb-field-value $place-msg  "gate"))) 
				)
			(if (? (pb-has-field 							$wp-msg 	"id"))
				(! (= $wp-id 				(pb-field-value $wp-msg  	"id"))) 
				)
			(if (? (pb-has-field 							$wp-msg 	"first_ring_color"))
				(! (= $first-ring-color 	(pb-field-value $wp-msg 	"first_ring_color")))
				)
			(if (? (pb-has-field 							$wp-msg 	"second_ring_color"))
				(! (= $second-ring-color 	(pb-field-value $wp-msg 	"second_ring_color")))
				)
			(if (? (pb-has-field 							$wp-msg 	"third_ring_color"))
				(! (= $third-ring-color 	(pb-field-value $wp-msg 	"third_ring_color")))
				)
			(if (? (pb-has-field 							$wp-msg 	"cap_color"))
				(! (= $cap-color 			(pb-field-value $wp-msg 	"cap_color")))
				)

			(if (? (BOUNDP $first-ring-color) 	)	(! (= @rings (rings $first-ring-color))) )
			(if (? (BOUNDP $second-ring-color) 	)	(! (= @rings (rings $first-ring-color $second-ring-color))) )
			(if (? (BOUNDP $third-ring-color) 	)	(! (= @rings (rings $first-ring-color $second-ring-color $third-ring-color))) )
			(if (? (~ (BOUNDP $first-ring-color)))	(! (= @rings (rings NONE))))
			(if (? (~ (BOUNDP $cap-color)) 		)	(! (= $cap-color NONE)))
			(if (? (~ (BOUNDP $gate))			)	
				(! (= @feature $feature))
				else
				(! (= @feature $gate))
				)
			;matching step
			(! (= (workpiece $wp-id (base $base-color) (val @rings) (cap $cap-color) (place $name (val @feature))) $workpiece)) 

			(! (printf (FORMAT "RECEIVED achieve-workpace with status %s \n" $status )))
			
			(if  (? (& 	(~ (= $my-name $agent))
						(~ (master-of REASONING $my-name))
						(~ (= $status SUCCEEDED))
						))
				GOTO fin
				)
			
			; ;Ignore if SAME workpiece already has any state in the db
			; (if (? (& 	(= $status REQUESTING)
			; 			(achieve-workpiece $agent $workpiece @any-status))) 
			; 	GOTO fin
			; 	)
			; ;Ignore if DIFFERENT workpiece is still processing
			; (if (? (& 	(= $status REQUESTING)
			; 			(~ (= $workpiece 				@some-other-workpiece))
			; 			(|| (achieve-workpiece $agent 	@some-other-workpiece REQUESTING) 
			; 				(achieve-workpiece $agent 	@some-other-workpiece STARTED)))) 
			; 	GOTO fin
			; 	)

			;Ignore IF there is ANY Achieve going on here on this agent
			(if (? (& 	(= $status REQUESTING)
						(achieve-workpiece $agent @workpiece @any-status))) 
				GOTO fin
				)

			;Ignore if SAME workpiece exists with a later status
			(if (? (& 	(= $status STARTED) 
						(|| (achieve-workpiece $agent $workpiece STARTED)
							(achieve-workpiece $agent $workpiece SUCCEEDED)
							(achieve-workpiece $agent $workpiece FAILED)
							(achieve-workpiece $agent $workpiece FINALIZING)))) 
				GOTO fin
				)
			;Ignore if DIFFERENT workpiece is already started [this should not happen if slave ensures a sin gle workpiece achievement at all points in time]
			(if (? (& 	(= $status STATRED)
						(~ (= $workpiece 				@some-other-workpiece)) 
							(achieve-workpiece $agent 	@some-other-workpiece STARTED)))
				(! (printf (FORMAT "Should not happen %s \n" $status )))
				(fail) 
				GOTO fin
				)
			;Ignore if SAME workpiece is already finalized
			(if (? (& 	(= $status SUCCEEDED) 
						(||	(achieve-workpiece $agent $workpiece SUCCEEDED)
							(achieve-workpiece $agent $workpiece FINALIZING)
							))) 
				GOTO fin
				)

			(if (? (& 	(= $status FAILED) 
						(||	(achieve-workpiece $agent $workpiece FAILED)
							(achieve-workpiece $agent $workpiece FINALIZING)
							))) 
				GOTO fin
				)

			; (if (? (& 	(= $status FINALIZING) 
			; 			(achieve-workpiece $agent @workpiece @stat)
			; 			(achieve-workpiece $agent @workpiece @some-status))) 
			; 	GOTO fin
			; 	)

			(=> (achieve-workpiece $agent $workpiece $status))

			LABEL fin
			)
		)

	;///////////////////////
	;on MASTER-OF REASONING
	;//////////////////////
    (defop co--Master--process-WorkpieceAchieve
    	:invocation ( timer "beacon" $last-sec $last-usec $seq )
    	:context	( 	(master-of REASONING $robot-name)
    	 				(peer-id private $peer-id)
    	 				)
    	:setting	(setting "robot-name" $robot-name)
    	:body(

    		(! (= $SUCC-FAIL-achievments-list (n-all-list 	(. $agent $workpiece $status .) 
    														(& 	(achieve-workpiece $agent $workpiece $status)
    														(|| (= $status SUCCEEDED) 
    															(= $status FAILED))))))
    		(if (? (< 0 (length $SUCC-FAIL-achievments-list) ))

	    		(! (= @agent-list 		(car $SUCC-FAIL-achievments-list)) )
	    		(! (= @workpiece-list 	(cadr $SUCC-FAIL-achievments-list)) )
	    		(! (= @status-list	 	(caddr $SUCC-FAIL-achievments-list)) )
	    		(while (? (~ (null @agent-list)))
	    			(! (= @agent 			(car @agent-list)))
	    			(! (= @status 			(car @status-list)))
	    			(! (= @workpiece 		(car @workpiece-list)))
	    			(! (= @agent-list 		(cdr @agent-list)))
	    			(! (= @status-list 		(cdr @status-list)))
	    			(! (= @workpiece-list	(cdr @workpiece-list))) 
	    			(if (? (= (val @status) SUCCEEDED) )
	    				; (? (= (workpiece @id @base @rings @cap @place)  (val @workpiece) )) 
	    				; (=> (workpiece (val @id) (val @base) (val @rings) (val @cap) (val @place)))
	    				;Moved to Seperate Op
	    				)
	    			
	    			(if (? (~ (= $robot-name (val @agent))))
	    				(=> (achieve-workpiece (val @agent) (val @workpiece) FINALIZING))
	    				)
	    			;delete it if its still there
	    			;(~> (achieve-workpiece (val @agent) (val @workpiece) (val @status)))
	    			(!	(= (workpiece @potentially-unbound-id @base @rings @cap @place) (val @workpiece) ))

	    			(~> (achieve-workpiece $agent (workpiece @any-matching-bound-id (val @base) (val @rings) (val @cap) (val @place)) FAILED )) 
	    			(~> (achieve-workpiece $agent (workpiece @any-matching-bound-id (val @base) (val @rings) (val @cap) (val @place)) STARTED))
	    			; (~> (achieve-workpiece $agent (workpiece @any-matching-bound-id (val @base) (val @rings) (val @cap) (val @place)) SUCCEEDED))
	    			)
    			)


    		(! (= $REQ-FIN-list (n-all-list (. $agent $workpiece $status .) (& 	(achieve-workpiece $agent $workpiece $status)
    																			(|| (= $status REQUESTING) 
    																				(= $status FINALIZING))))))
    		; (! (print $REQ-FIN-list))
    		(if (? (< 0 (length $REQ-FIN-list) ))

	    		(! (= @agent-list 		(car $REQ-FIN-list)) )
	    		(! (= @workpiece-list 	(cadr $REQ-FIN-list)) )
	    		(! (= @status-list	 	(caddr $REQ-FIN-list)) )
	    		(while (? (~ (null @agent-list)))
	    			(! (= @agent 			(car @agent-list)))
	    			(! (= @status 			(car @status-list)))
	    			(! (= @workpiece 		(car @workpiece-list)))
	    			(! (= @agent-list 		(cdr @agent-list)))
	    			(! (= @status-list 		(cdr @status-list)))
	    			(! (= @workpiece-list	(cdr @workpiece-list))) 
	    			;matching step
					(! (=  (workpiece @id (base @base-color) @rings (cap @cap-color) (place @name @feature)) (val @workpiece))) 

					(! (= @place-msg (pb-create "llsf_msgs.Place")))
					(! (pb-set-field @place-msg "name" 		(val @name)))
					;If it was DS . Assigne Gate number in the msg
					(if (? (machine (val @name) "DS" $mps-state $mps-prepared $mps-zone $mps-pose $mps-loaded-with)) 
						(! (pb-set-field @place-msg "feature" 	"gate" ))
						(! (pb-set-field @place-msg "gate" 		(val @feature) ))
						else
						(! (pb-set-field @place-msg "feature" 	(val @feature)))
						)
					
					; (! (pb-broadcast $peer-id (val @place-msg)))
					(! (= @wp-msg (pb-create "llsf_msgs.Workpiece")))
					(! (pb-set-field @wp-msg "id" 			(val @id)))
					(! (pb-set-field @wp-msg "base_color" 	(val @base-color)))
					(if (? (= (val @rings) (rings NONE)))
					;Add Nothing
					else
					(if (? (= (val @rings) (rings @first-ring-color)))
						(! (pb-set-field @wp-msg "first_ring_color" (val @first-ring-color)))
						else 
						(if (? (= (val @rings) (rings @first-ring-color @second-ring-color)))
							(! (pb-set-field @wp-msg "first_ring_color" 	(val @first-ring-color)))
							(! (pb-set-field @wp-msg "second_ring_color" 	(val @second-ring-color)))
							else 
							(if (? (= (val @rings) (rings @first-ring-color @second-ring-color @third-ring-color)))
								(! (pb-set-field @wp-msg "first_ring_color" 	(val @first-ring-color)))
								(! (pb-set-field @wp-msg "second_ring_color" 	(val @second-ring-color)))
								(! (pb-set-field @wp-msg "third_ring_color" 	(val @third-ring-color)))
								)
							)
						)
					)	
					(if (? (~ (= (val @cap-color) NONE)))
						(! (pb-set-field @wp-msg "cap_color" (val @cap-color)))
					)
					(! (pb-set-field @wp-msg "place" 			(val @place-msg)))
					; (! (pb-broadcast $peer-id (val @wp-msg)))
					(! (= @msg (pb-create "llsf_msgs.AchieveWorkpiece")))
					(! (pb-set-field @msg "agent" 		(val @agent)))
					(! (pb-set-field @msg "status" 		(val @status)))
					(! (pb-set-field @msg "workpiece" 	(val @wp-msg)))
					(! (pb-broadcast $peer-id (val @msg)))
					(! (pb-destroy @msg))
					
					;Note: this does not work for somereason. Check why 
					; (! (pb-broadcast $peer-id (val @wp-msg)))
					; (! (pb-set-field @wp-msg "ring_colors" 	[ (l-list RING_BLUE)| RINGBLUE | (.RING_BLUE. ) ] ))  Somthing is not working with the pb-add-list..CANT get to use it 
					; (! (print "RING LIST"))
					; (! (print (pb-field-list @wp-msg "ring_colors")))

					;Only send finalizing once
					(if (? (= (val @status) FINALIZING) ) 
						(~> (achieve-workpiece (val @agent) (val @workpiece) FINALIZING))
						)    				
	    			)
    			)
    		)
		)

	
	;///////////////////////////////////////
	;WORKER ROBOTS (Slaves or Achieving Bots) 
	;///////////////////////////////////////
	(defop co--Slave--proces-AchieveWorkpiece
		:invocation (timer "beacon" $last-sec $last-usec $seq )
		:context	(& 	(agent-name $agent)
						(peer-id private $peer-id)
						)
		:body(
			;All facts for this agent
			(! (= $achieve-workpiece-list (n-all-list 	(. $workpiece $status .)
														(achieve-workpiece $agent $workpiece $status))))
				; (! (print $achieve-workpiece-list))
			(if (? (< 0 (length $achieve-workpiece-list) ))

	    		(! (= @workpiece-list 	(car $achieve-workpiece-list)) )
	    		(! (= @status-list	 	(cadr $achieve-workpiece-list)) )
	    		(while (? (~ (null @status-list)))
	    			(! (= @status 			(car @status-list)))
	    			(! (= @workpiece 		(car @workpiece-list)))
	    			(! (= @status-list 		(cdr @status-list)))
	    			(! (= @workpiece-list	(cdr @workpiece-list))) 
	    		
	    			(if (? (= (val @status) REQUESTING) )
	    				;Fail if a differnt WP requested or started.
	    				(if (? (& 	(|| (achieve-workpiece $agent @differnt-workpiece STARTED)
	    								(achieve-workpiece $agent @differnt-workpiece REQUESTING))
	    							(~ (= (val @workpiece) @differnt-workpiece))))
							(! (printf (FORMAT "Trying to Achieve WP while something else is STARTED or REQUESTED  \n" )))
	    					(=> (achieve-workpiece $agent (val @workpiece) FAILED))
	    					else
		    				;Ignore If the same wp is already started.
		    				(if (? (~ (achieve-workpiece $agent (val @workpiece) STATRED)))
		    					(if (? (val @workpiece))
		    						(=> (achieve-workpiece $agent (val @workpiece) SUCCEEDED));
		    						else 
			    					(=> (achieve-workpiece $agent (val @workpiece) STARTED))
		    						; (! (= $Achieve-Goal (BUILD-GOAL 
		    						; 						(! (achieve-workpiece $agent (val @workpiece)))
		    						; 						)))
		    						; (! (INTENDED-GOAL $Achieve-Goal))
		    						)
		    					)
		    				)
	    				)

	    			(if (? (= (val @status) FINALIZING))
    					(!	(= (workpiece @potentially-unbound-id @base @rings @cap @place) (val @workpiece) ))

    					(~> (achieve-workpiece $agent (workpiece @any-matching-bound-id (val @base) (val @rings) (val @cap) (val @place)) FINALIZING))
    					(~> (achieve-workpiece $agent (workpiece @any-matching-bound-id (val @base) (val @rings) (val @cap) (val @place)) FAILED )) 
    					(~> (achieve-workpiece $agent (workpiece @any-matching-bound-id (val @base) (val @rings) (val @cap) (val @place)) STARTED))
    					(~> (achieve-workpiece $agent (workpiece @any-matching-bound-id (val @base) (val @rings) (val @cap) (val @place)) SUCCEEDED))
    					)

	    			(if (? (|| 	(= (val @status) SUCCEEDED) 
	    						(= (val @status) FAILED) 
	    						(= (val @status) STARTED)))
	    				;Send it,if still in Database.
	    				(if (?  (achieve-workpiece $agent (val @workpiece) (val @status) )) 
							(! (= (workpiece @id (base @base-color) @rings (cap @cap-color) (place @name @feature)) (val @workpiece) )) 
							(! (= @place-msg (pb-create "llsf_msgs.Place")))
							(! (pb-set-field @place-msg "name" 		(val @name)))
							;If it was DS . Assigne Gate number in the msg
							(if (? (machine (val @name) "DS" $mps-state $mps-prepared $mps-zone $mps-pose $mps-loaded-with)) 
								(! (pb-set-field @place-msg "feature" 	"gate" ))
								(! (pb-set-field @place-msg "gate" 		(val @feature) ))
								else
								(! (pb-set-field @place-msg "feature" 	(val @feature)))
								)

							(! (= @wp-msg (pb-create "llsf_msgs.Workpiece")))
							(! (pb-set-field @wp-msg "id" 			(val @id)))
							(! (pb-set-field @wp-msg "base_color" 	(val @base-color)))
							(if (? (= (val @rings) (rings NONE)))
								;Add Nothing
								else
								(if (? (= (val @rings) (rings @first-ring-color)))
									(! (pb-set-field @wp-msg "first_ring_color" (val @first-ring-color)))
									else
									(if (? (= (val @rings) (rings @first-ring-color @second-ring-color)))
										(! (pb-set-field @wp-msg "first_ring_color" 	(val @first-ring-color)))
										(! (pb-set-field @wp-msg "second_ring_color" 	(val @second-ring-color)))
										else 
										(if (? (= (val @rings) (rings @first-ring-color @second-ring-color @third-ring-color)))
											(! (pb-set-field @wp-msg "first_ring_color" 	(val @first-ring-color)))
											(! (pb-set-field @wp-msg "second_ring_color" 	(val @second-ring-color)))
											(! (pb-set-field @wp-msg "third_ring_color" 	(val @third-ring-color)))
											)
										)
									)
								)	
							(if (? (~ (= (val @cap-color) NONE)))
								(! (pb-set-field @wp-msg "cap_color" (val @cap-color)))
								)
							(! (pb-set-field @wp-msg "place"	(val @place-msg)))

							(! (= @senderinfo-msg (pb-create "llsf_msgs.SenderInfo") ))
							(! (pb-set-field @senderinfo-msg "name" $agent))
							(if (? (master-of REQUESTING $agent))
								(! (pb-set-field @senderinfo-msg "reasoning_role" "master"))
								else
								(! (pb-set-field @senderinfo-msg "reasoning_role" "slave"))
								)
							
							(! (= @msg (pb-create "llsf_msgs.AchieveWorkpiece")))
							(! (pb-set-field @msg "agent" 		$agent))
							(! (pb-set-field @msg "status" 		(val @status)))
							(! (pb-set-field @msg "workpiece" 	(val @wp-msg)))
							(! (pb-set-field @msg "sender_info" (val @senderinfo-msg)))
							(! (pb-broadcast $peer-id (val @msg)))
							(! (pb-destroy @msg))
			  				)
	    				)

					)
				)
			)
		)

	;===========================================/////////======================================


	)