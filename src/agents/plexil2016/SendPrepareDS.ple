
/***************************************************************************
 *  SendPrepareDS.ple -  PLEXIL action to prepare the DS
 *
 *  Created: Thu Aug 23 11:42:20 2018
 *  Copyright  2018  Tim Niemueller [www.niemueller.de]
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL file in the doc directory.
 */

        Command print(...);
        Command pprint(...);
        Command log_debug(...);
        Command log_info(...);
        Command log_warn(...);
        Command log_error(...);

String  Command pb_create(String msg_type);
        Command pb_set_value(String msg_id, String field, Any value);
        Command pb_broadcast(Integer peer_id, String msg_id);

Integer Lookup  private_peer_id;
String  Lookup  team_color;
String  Lookup  mps_state (String);
Date    Lookup  time;

SendPrepareDS:
Concurrence
{
	In String  machine;
	In Integer gate;

	Boolean timeout_occurred = false;

  EndCondition  Lookup(mps_state(machine)) != "IDLE" || timeout_occurred;

	PreCondition  isKnown(Lookup(private_peer_id)) &&
	              isKnown(Lookup(team_color)) &&
	              isKnown(Lookup(mps_state(machine)));
	PostCondition ! timeout_occurred;

	SendMessage:
	{
		// we need to nest another sequence so we can repeat the inner node
		// while the outer node is continuously running in parallel to the
		// long duration action FailAfterTimeout
		{
			String msgid;

			RepeatCondition Lookup(mps_state(machine)) == "IDLE";

			msgid = pb_create("llsf_msgs.PrepareMachine");
			pb_set_value(msgid, "team_color", Lookup(team_color));
			pb_set_value(msgid, "machine", machine);
			pb_set_value(msgid, "instruction_ds.gate", gate);

			pprint("Sending prepare DS", machine, gate);
			pb_broadcast(Lookup(private_peer_id), msgid);

			Wait 1.0;
		}
	}

	FailAfterTimeout:
	{
		StartCondition Lookup(time, Duration("PT1.0S")) >= SendPrepareDS.EXECUTING.START + Duration("PT10.0S");
		SkipCondition  Lookup(mps_state(machine)) != "IDLE";
		log_error("SendPrepareDS timeout");
		timeout_occurred = true;
	}
}

// vim: noet:ci:pi:sts=0:sw=4:ts=4
