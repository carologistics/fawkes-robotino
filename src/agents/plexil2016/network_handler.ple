
/***************************************************************************
 *  network_handler.ple -  PLEXIL network handler for the RCLL
 *
 *  Created: Wed Aug 22 14:18:31 2018
 *  Copyright  2018  Tim Niemueller [www.niemueller.de]
 *             2018  Till Hofmann
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL file in the doc directory.
 */

// ###  Command declarations ###
        Command pprint(...);
        Command print(...);
        Command log_debug(...);
        Command log_info(...);
        Command log_warn(...);
        Command log_error(...);
String  Command to_string(...);

Boolean Command config_exists(String path);
String  Command config_get_string(String path);
Integer Command config_get_int(String path);
Real    Command config_get_real(String path);
Boolean Command config_get_bool(String path);
String  Command config_get_string_or_default(String path, String default);
Integer Command config_get_int_or_default(String path, Integer default);
Real    Command config_get_real_or_default(String path, Real default);
Boolean Command config_get_bool_or_default(String path, Boolean default);

Integer Command pb_peer_create_local(String address, Integer send_port, Integer recv_port);
Integer Command pb_peer_create_local_crypto(String address, Integer send_port, Integer recv_port,
                                            String crypto_key, String cipher);
String  Command pb_create(String msg_type);
        Command pb_set_value(String msg_id, String field, Any value);
Integer Command pb_get_length(String msg_id, String field);
Integer Command pb_get_int(String msg_id, String field);
Real    Command pb_get_real(String msg_id, String field);
Boolean Command pb_get_bool(String msg_id, String field);
String  Command pb_get_string(String msg_id, String field);
Boolean Command pb_has_field(String msg_id, String field);
String  Command pb_tostring(String msg_id);
        Command pb_broadcast(Integer peer_id, String msg_id);

String  Command global_set_value(...);

Integer Lookup  private_peer_id;
String  Lookup  team_color;
String  Lookup  game_phase;
String  Lookup  game_state;
String  Lookup  robot_name;
String  Lookup  mps_prefix;
String  Lookup  mps_state (String);
String  Lookup  mps_type  (String);
String  Lookup  mps_rs_ring1 (String);
String  Lookup  mps_rs_ring2 (String);
String  Lookup  order_complexity (String);
String  Lookup  order_base_color (String);
String  Lookup  order_ring1_color (String);
String  Lookup  order_ring2_color (String);
String  Lookup  order_ring3_color (String);
String  Lookup  order_cap_color (String);
Integer Lookup  order_quantity_requested (String);
Integer Lookup  order_quantity_delivered (String);
Real    Lookup  order_delivery_period_begin (String);
Real    Lookup  order_delivery_period_end (String);
Integer Lookup  order_delivery_gate (String);

network_handler:
{
	In    Boolean continue;

	Integer public_peer_id;
	String  peer_address;
	String  team_name;
	Integer robot_number;

	RepeatCondition continue;

  Setup:
	{
		Integer send_port;
		Integer recv_port;
		Boolean exists_send;
		Boolean exists_recv;
		String  cfg_robot_name;

		peer_address = config_get_string("/plexil/rcll2016/params/peer-address");
		team_name = config_get_string("/plexil/rcll2016/params/team-name");
		cfg_robot_name = config_get_string("/plexil/rcll2016/params/robot-name");
		robot_number = config_get_int("/plexil/rcll2016/params/robot-number");

		exists_recv = config_exists("/plexil/rcll2016/params/peer-recv-port");
		exists_send = config_exists("/plexil/rcll2016/params/peer-send-port");

		global_set_value("robot_name", cfg_robot_name);

		if (exists_send && exists_recv)
		{
			send_port = config_get_int("/plexil/rcll2016/params/peer-send-port");
			recv_port = config_get_int("/plexil/rcll2016/params/peer-recv-port");
		}
		else
		{
			send_port = config_get_int("/plexil/rcll2016/params/peer-port");
			recv_port = send_port;
		}
		endif

		print("Setting up public peer, address: ", peer_address,
		      " send port: ", send_port, " recv_port: ", recv_port);

	  public_peer_id = pb_peer_create_local(peer_address, send_port, recv_port);
	}

	RunNetwork:
	Concurrence
	{
		HandleIncomingMessages:
		Concurrence
		{
			RepeatCondition continue;

			{
				RepeatCondition continue;

				ReceiveBeaconSignal:
				OnCommand "llsf_msgs.BeaconSignal" (String msg_id, String from_host, Integer from_port, Real time_received)
				{
					//pprint("Got", msg_id, from_host, from_port, time_received);
				}
			}

			{
				RepeatCondition continue;

				ReceiveGameState:
				OnCommand "llsf_msgs.GameState" (String msg_id, String from_host, Integer from_port, Real time_received)
				{
					Integer send_port;
					Integer recv_port;
					String  team_color;
					String  mps_prefix;
					String  game_state;
					String  game_phase;

					game_state = pb_get_string(msg_id, "state");
					if ! isKnown(Lookup(game_state)) || Lookup(game_state) != game_state
					{
						print("New game state: ", game_state);
						global_set_value("game_state", game_state);
					}
					endif
					game_phase = pb_get_string(msg_id, "phase");
					if ! isKnown(Lookup(game_phase)) || Lookup(game_phase) != game_phase
					{
						print("New game phase: ", game_phase);
						global_set_value("game_phase", game_phase);
					}
					endif

					SetTeam:
					{
						Boolean have_team_cyan;
						Boolean have_team_magenta;

						SkipCondition isKnown(Lookup(private_peer_id));

						have_team_cyan    = pb_has_field(msg_id, "team_cyan");
						have_team_magenta = pb_has_field(msg_id, "team_magenta");

						if have_team_cyan
						{
							String team_cyan;
							team_cyan = pb_get_string(msg_id, "team_cyan");

							if (team_cyan == team_name)
							{
								Boolean exists_send;
								Boolean exists_recv;
								exists_recv = config_exists("/plexil/rcll2016/params/cyan-recv-port");
								exists_send = config_exists("/plexil/rcll2016/params/cyan-send-port");

								print("Detected team CYAN, creating peer");
								team_color = "CYAN";
								mps_prefix = "C-";

								if (exists_send && exists_recv)
								{
									send_port = config_get_int("/plexil/rcll2016/params/cyan-send-port");
									recv_port = config_get_int("/plexil/rcll2016/params/cyan-recv-port");
								}
								else
								{
									send_port = config_get_int("/plexil/rcll2016/params/cyan-port");
									recv_port = send_port;
								}
								endif
							}
							endif
						}
						endif
						
						if have_team_magenta
						{
							String team_magenta;
							team_magenta = pb_get_string(msg_id, "team_magenta");

							if (team_magenta == team_name)
							{
								Boolean exists_send;
								Boolean exists_recv;
								exists_recv = config_exists("/plexil/rcll2016/params/magenta-recv-port");
								exists_send = config_exists("/plexil/rcll2016/params/magenta-send-port");

								print("Detected team MAGENTA, creating peer");
								team_color = "MAGENTA";
								mps_prefix = "M-";

								if (exists_send && exists_recv)
								{
									send_port = config_get_int("/plexil/rcll2016/params/magenta-send-port");
									recv_port = config_get_int("/plexil/rcll2016/params/magenta-recv-port");
								}
								else
								{
									send_port = config_get_int("/plexil/rcll2016/params/magenta-port");
									recv_port = send_port;
								}
								endif
							}
							endif
						}
						endif

						if (isKnown(team_color))
						{
							String crypto_key;
							String cipher;
							Integer peer_id;

							crypto_key = config_get_string("/plexil/rcll2016/params/crypto-key");
							cipher = config_get_string("/plexil/rcll2016/params/cipher");
							print("Setting up private peer, address: ", peer_address,
							      " send port: ", send_port, " recv_port: ", recv_port);
							peer_id = pb_peer_create_local_crypto(peer_address, send_port, recv_port,
							                                      crypto_key, cipher);

							global_set_value("private_peer_id", peer_id);
							global_set_value("team_color", team_color);
							global_set_value("mps_prefix", mps_prefix);
						}
						endif
					}
				}
			}

			{
				RepeatCondition continue;

				ReceiveMachineInfo:
				OnCommand "llsf_msgs.MachineInfo" (String msg_id, String from_host, Integer from_port, Real time_received)
				{
					Integer num_mps;
					num_mps = pb_get_length(msg_id, "machines[]");

					for (Integer i = 0; i < num_mps; i + 1)
					{
						String prefix;
						String mps_name;
						String mps_type;
						String mps_state;
						String index_str;

						index_str = to_string(i);
						prefix = "machines[" + index_str + "].";
						mps_name = pb_get_string(msg_id, prefix + "name");
						mps_type = pb_get_string(msg_id, prefix + "type");
						if ! isKnown(Lookup(mps_type(mps_name)))
						{
							global_set_value("mps_type", mps_name, mps_type);
						}
						endif

						mps_state = pb_get_string(msg_id, prefix + "state");
						if ! isKnown(Lookup(mps_state(mps_name))) || Lookup(mps_state(mps_name)) != mps_state
						{
							global_set_value("mps_state", mps_name, mps_state);
						}
						endif

						if mps_type == "DS" &&
					     !isKnown(Lookup(mps_rs_ring1(mps_name))) &&
					     !isKnown(Lookup(mps_rs_ring2(mps_name)))
						{
							Integer num_rings;
							num_rings = pb_get_length(msg_id, prefix + "ring_colors[]");
							if num_rings == 2
							{
								String ring_color_1;
								String ring_color_2;
								ring_color_1 = pb_get_string(msg_id, prefix + "ring_colors[0]");
								ring_color_2 = pb_get_string(msg_id, prefix + "ring_colors[1]");
								global_set_value("mps_rs_ring1", mps_name, ring_color_1);
								global_set_value("mps_rs_ring2", mps_name, ring_color_1);
							}
							endif
						}
						endif
					}
				}
			}

			{
				RepeatCondition continue;

				ReceiveOrderInfo:
				OnCommand "llsf_msgs.OrderInfo" (String msg_id, String from_host, Integer from_port, Real time_received)
				{
					Integer num_orders;
					num_orders = pb_get_length(msg_id, "orders[]");

					for (Integer i = 0; i < num_orders; i + 1)
					{
						String  order_str;
						Integer order_id_num;
						String  order_id;
						String  prefix;
						String  complexity;
						String  base_color;
						Integer num_rings;
						String  ring1;
						String  ring2;
						String  ring3;
						String  cap_color;
						Integer quantity_requested;
						Integer quantity_delivered;
						Real    delivery_period_begin;
						Real    delivery_period_end;
						Integer delivery_gate;

						order_str = to_string(i);
						prefix = "orders[" + order_str + "].";

						order_id_num = pb_get_int(msg_id, prefix + "id");
						order_id     = to_string(order_id_num);
						complexity   = pb_get_string(msg_id, prefix + "complexity");
						base_color   = pb_get_string(msg_id, prefix + "base_color");
						num_rings    = pb_get_length(msg_id, prefix + "ring_colors[]");
						if (num_rings >= 1)
						{
							ring1 = pb_get_string(msg_id, prefix + "ring_colors[0]");
						}
						endif
						if (num_rings >= 2)
						{
							ring2 = pb_get_string(msg_id, prefix + "ring_colors[1]");
						}
						endif
						if (num_rings >= 3)
						{
							ring3 = pb_get_string(msg_id, prefix + "ring_colors[2]");
						}
						endif
						cap_color = pb_get_string(msg_id, prefix + "cap_color");

						quantity_requested = pb_get_int(msg_id, prefix + "quantity_requested");
						if Lookup(team_color) == "CYAN"
						{
							quantity_delivered = pb_get_int(msg_id, prefix + "quantity_delivered_cyan");
						}
						else
						{
							quantity_delivered = pb_get_int(msg_id, prefix + "quantity_delivered_magenta");
						}
						endif

						delivery_period_begin = pb_get_int(msg_id, prefix + "delivery_period_begin");
						delivery_period_end   = pb_get_int(msg_id, prefix + "delivery_period_end");
						delivery_gate         = pb_get_int(msg_id, prefix + "delivery_gate");

						if ! isKnown(Lookup(order_complexity(order_id)))
						{
							global_set_value("order_complexity", order_id, complexity);
							global_set_value("order_base_color", order_id, base_color);
							global_set_value("order_ring1_color", order_id, ring1);
							global_set_value("order_ring2_color", order_id, ring2);
							global_set_value("order_ring3_color", order_id, ring3);
							global_set_value("order_cap_color", order_id, cap_color);
							global_set_value("order_quantity_requested", order_id, quantity_requested);
							global_set_value("order_quantity_delivered", order_id, quantity_delivered);
							global_set_value("order_delivery_period_begin", order_id, delivery_period_begin);
							global_set_value("order_delivery_period_end", order_id, delivery_period_end);
							global_set_value("order_delivery_gate", order_id, delivery_gate);
						}
						elseif Lookup(order_quantity_delivered(order_id)) != quantity_delivered
						{
							global_set_value("order_quantity_delivered", order_id, quantity_delivered);
						}
						endif
					}
				}
			}
		}


		BeaconSignalSend:
		{
			Integer seq = 0;

			StartCondition  isKnown(Lookup(private_peer_id)) &&
			                isKnown(Lookup(team_color)) &&
			                isKnown(Lookup(robot_name));
			RepeatCondition continue;

			// Using the EndCondition would be an alternative to the Wait, but it's not as clear
			//EndCondition Lookup(time, 1) >= SendBeacon.EXECUTING.START + 2;

			BeaconSignalSendMessage:
			{
				String msgid;
				//String msgstr;
				Real now;
				Integer num_val;
				Integer now_sec;
				Integer now_nsec;

				now = Lookup(time, 1);
				now_sec  = real_to_int(floor(now));
				now_nsec = real_to_int(floor((now - now_sec) * 1000000000));
 				seq = seq + 1;

				msgid = pb_create("llsf_msgs.BeaconSignal");
				pb_set_value(msgid, "number", robot_number);
				pb_set_value(msgid, "seq", seq);
				pb_set_value(msgid, "time.sec", now_sec);
				pb_set_value(msgid, "time.nsec", now_nsec);
				pb_set_value(msgid, "team_name", team_name);
				pb_set_value(msgid, "peer_name", Lookup(robot_name));
				pb_set_value(msgid, "team_color", Lookup(team_color));
				//msgstr = pb_tostring(msgid);
				//pprint("Created message", msgid, msgstr);

				//print("Sending beacon");
				pb_broadcast(Lookup(private_peer_id), msgid);
			}

			// Wait before we send it again
			BeaconSignalWait: Wait 2.0;
		}
	}
}

// vim: noet:ci:pi:sts=0:sw=4:ts=4
