
/***************************************************************************
 *  plan.ple -  PLEXIL plan for the RCLL2016 scenario
 *
 *  Created: Tue Aug 21 14:31:17 2018
 *  Copyright  2006-2018  Tim Niemueller [www.niemueller.de]
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL file in the doc directory.
 */

// ###  Command declarations ###
Command pprint(...);
Command print(...);
Command log_debug(...);
Command log_info(...);
Command log_warn(...);
Command log_error(...);

Boolean Command config_exists(String path);
String  Command config_get_string(String path);
Integer Command config_get_int(String path);
Real    Command config_get_real(String path);
Boolean Command config_get_bool(String path);
String  Command config_get_string_or_default(String path, String default);
Integer Command config_get_int_or_default(String path, Integer default);
Real    Command config_get_real_or_default(String path, Real default);
Boolean Command config_get_bool_or_default(String path, Boolean default);

Integer Command pb_peer_create_local(String address, Integer send_port, Integer recv_port);
Integer Command pb_peer_create_local_crypto(String address, Integer send_port, Integer recv_port,
                                            String crypto_key, String cipher);
String  Command pb_create(String msg_type);
        Command pb_set_value(String msg_id, String field, Any value);
Integer Command pb_get_length(String msg_id, String field);
Integer Command pb_get_int(String msg_id, String field);
Real    Command pb_get_real(String msg_id, String field);
Boolean Command pb_get_bool(String msg_id, String field);
String  Command pb_get_string(String msg_id, String field);
String  Command pb_tostring(String msg_id);
        Command pb_broadcast(Integer peer_id, String msg_id);

String[100] Command navgraph_get_nodes();
Real    Command navgraph_cost_to(String target);
Real    Command navgraph_cost_between(String from, String to);

// ###  Skills  ###
Boolean Command say(String text);
Boolean Command goto(String place);
Boolean Command pick_from_conveyor(String mps, String side);
Boolean Command pick_from_shelf(String mps, String shelf);
Boolean Command put_on_conveyor(String mps, String side);
Boolean Command put_on_shelf(String mps, String shelf);
Boolean Command put_on_slide(String mps);

// ###  State declarations ###
Real    Lookup time;
String  Lookup game_phase;
String  Lookup game_state;

LibraryAction network_handler (In Boolean continue);
LibraryAction SendPrepareBS   (In String machine, In String side, In String base_color);
LibraryAction SendPrepareCS   (In String machine, In String operation);

RCLL:
{
	Boolean continue = true;

	Run:
	Concurrence
	{
		HandleIncoming:
		LibraryCall network_handler (continue=continue);

		ProduceC0:
		{
			StartCondition Lookup(game_phase) == "PRODUCTION" && Lookup(game_state) == "RUNNING";
			log_info("Now in PRODUCTION and RUNNING");
			SynchronousCommand goto("C-CS1-I");
			SynchronousCommand pick_from_shelf("C-CS1", "LEFT");
			LibraryCall SendPrepareCS (machine="C-CS1", operation="RETRIEVE_CAP");
			SynchronousCommand put_on_conveyor("C-CS1", "input");
			SynchronousCommand goto("C-CS1-O");
			SynchronousCommand pick_from_conveyor("C-CS1", "output");
			SynchronousCommand goto("C-RS1-I");
			SynchronousCommand put_on_slide("C-RS1");
			SynchronousCommand goto("C-BS-I");
			LibraryCall SendPrepareBS (machine="C-BS", side="INPUT", base_color="BASE_BLACK");
			SynchronousCommand pick_from_conveyor("C-BS", "input");
			SynchronousCommand goto("C-CS1-I");
			SynchronousCommand put_on_conveyor("C-CS1", "input");
			LibraryCall SendPrepareCS (machine="C-CS1", operation="MOUNT_CAP");
			SynchronousCommand goto("C-CS1-O");
			SynchronousCommand pick_from_conveyor("C-CS1", "output");
			SynchronousCommand goto("C-DS");
			SynchronousCommand put_on_conveyor("C-DS", "input");
		}
	}
}
