
/***************************************************************************
 *  plan.ple -  PLEXIL plan for the RCLL2016 scenario
 *
 *  Created: Tue Aug 21 14:31:17 2018
 *  Copyright  2018  Tim Niemueller [www.niemueller.de]
 *             2018  Till Hofmann
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL file in the doc directory.
 */

// ###  Command declarations ###
        Command pprint(...);
        Command print(...);
        Command log_debug(...);
        Command log_info(...);
        Command log_warn(...);
        Command log_error(...);
String  Command to_string(...);

Boolean Command config_exists(String path);
String  Command config_get_string(String path);
Integer Command config_get_int(String path);
Real    Command config_get_real(String path);
Boolean Command config_get_bool(String path);
String  Command config_get_string_or_default(String path, String default);
Integer Command config_get_int_or_default(String path, Integer default);
Real    Command config_get_real_or_default(String path, Real default);
Boolean Command config_get_bool_or_default(String path, Boolean default);

Integer Command pb_peer_create_local(String address, Integer send_port, Integer recv_port);
Integer Command pb_peer_create_local_crypto(String address, Integer send_port, Integer recv_port,
                                            String crypto_key, String cipher);
String  Command pb_create(String msg_type);
        Command pb_set_value(String msg_id, String field, Any value);
Integer Command pb_get_length(String msg_id, String field);
Integer Command pb_get_int(String msg_id, String field);
Real    Command pb_get_real(String msg_id, String field);
Boolean Command pb_get_bool(String msg_id, String field);
String  Command pb_get_string(String msg_id, String field);
String  Command pb_tostring(String msg_id);
        Command pb_broadcast(Integer peer_id, String msg_id);

String[100] Command navgraph_get_nodes();
Real    Command navgraph_cost_to(String target);
Real    Command navgraph_cost_between(String from, String to);


String  Command global_set_value(...);
        Command global_print_all();

// ###  Skills  ###
Boolean Command say(String text);
Boolean Command enter_field(String team_color, String robot_name);
Boolean Command goto(String place);
Boolean Command pick_from_conveyor(String mps, String side);
Boolean Command pick_from_shelf(String mps, String shelf);
Boolean Command put_on_conveyor(String mps, String side);
Boolean Command put_on_shelf(String mps, String shelf);
Boolean Command put_on_slide(String mps);

// ###  State declarations ###
Real    Lookup  time;
String  Lookup  game_phase;
String  Lookup  game_state;
String  Lookup  team_color;
String  Lookup  robot_name;
String  Lookup  mps_prefix;
String  Lookup  mps_state (String);
String  Lookup  order_complexity (String);
String  Lookup  order_base_color (String);
String  Lookup  order_ring1_color (String);
String  Lookup  order_ring2_color (String);
String  Lookup  order_ring3_color (String);
String  Lookup  order_cap_color (String);
Integer Lookup  order_quantity_requested (String);
Integer Lookup  order_quantity_delivered (String);
Real    Lookup  order_delivery_period_begin (String);
Real    Lookup  order_delivery_period_end (String);
Integer Lookup  order_delivery_gate (String);

// ###  Library actions (check <action_name>.ple for content) ###
LibraryAction network_handler (In Boolean continue);
LibraryAction SendPrepareBS   (In String machine, In String side, In String base_color);
LibraryAction SendPrepareCS   (In String machine, In String operation);
LibraryAction SendPrepareDS   (In String machine, In Integer gate);
LibraryAction SendPrepareRS   (In String machine, In String ring_color);

RCLL:
{
	Boolean continue = true;

	Run:
	Concurrence
	{
		HandleIncoming:
		LibraryCall network_handler (continue=continue);

		EnterField:
		{
			String team_color_arg;
			String robot_name_arg;

			StartCondition Lookup(game_phase) == "PRODUCTION" &&
			               Lookup(game_state) == "RUNNING" &&
			               isKnown(Lookup(team_color)) &&
			               isKnown(Lookup(mps_prefix)) &&
			               isKnown(Lookup(robot_name));

			team_color_arg = Lookup(team_color);
			robot_name_arg = Lookup(robot_name);

			log_info("Now in PRODUCTION and RUNNING -- entering field");
			enter_field: SynchronousCommand enter_field(team_color_arg, robot_name_arg);
		}

		GoSomewhere:
		{
			String mps_name;
			StartCondition EnterField.state == FINISHED && isKnown(Lookup(mps_prefix));

			mps_name = Lookup(mps_prefix) + "BS-I";

			log_info("Going to ", mps_name);
			goto_bs_i:  SynchronousCommand goto(mps_name);
		}
	}
}

// vim: noet:ci:pi:sts=0:sw=4:ts=4
