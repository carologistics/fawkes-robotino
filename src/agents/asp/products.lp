% Defined programs:
% base                           The initial setup.
% transition(gt)                 The transformations of the products.
%
% In this file defined predicates:
% generatedProduct(R, P, GT)     The generated identifiert for product from R at GT is P.
% product(product(I))            A product already around at gt 0 with index I.
% product(product(R, I))         A product generated by R, its index is I.
% productBase(P, B)              The base color of product P is B.
% productCap(P, C, GT)           The cap color of product P at GT is C.
% productRing(P, R, C, GT)       The ring color of the R-th ring of product P at GT is C.
%
% Additionally used predicates:
% baseColor(B)                   Defined in facts.lp
% capColor(C)                    Defined in facts.lp
% capMounted(P, C, GT)           Defined in mountCap.lp
% capStationAssignment(M, C)     Defined in facts.lp
% generateProduct(R, B, GT)      Defined in some task descriptions.
% horizon(GT)                    Defined in facts.lp
% ringColor(C)                   Defined in facts.lp
% ringMounted(M, P, C, GT)       Defined in mountRing.lp

#external product(product(I))              : I = 0..@maxProducts() - 1.
#external productBase(product(I), B)       : I = 0..@maxProducts() - 1, baseColor(B).
#external productBase(product(I), B)       : I = 0..@maxProducts() - 1, B = "TRANSPARENT".
#external productCap(product(I), C, 0)     : I = 0..@maxProducts() - 1, capColor(C).
#external productRing(product(I), R, C, 0) : I = 0..@maxProducts() - 1, ringColor(C), R = 1..3.

#program ourTeam(t).

generatedProduct(R, product(R, GT), GT) :- generateProduct(R, _, GT).
product(P) :- generatedProduct(_, P, _).
productBase(P, B) :- generateProduct(R, B, GT), generatedProduct(R, P, GT).

productCap(P, C, GT) :- productCap(P, C, GT-1), not horizon(GT).
productCap(P, C, GT) :- capMounted(M, P, GT), capStationAssignment(M, C).

productRing(P, R, C, GT) :- productRing(P, R, C, GT-1), not horizon(GT).
productRing(P, 1, C, GT) :- ringMounted(_, P, C, GT), not productRing(P, 1, _, GT-1), not horizon(GT).
productRing(P, R, C, GT) :- ringMounted(_, P, C, GT), not productRing(P, R, _, GT-1), productRing(P, R-1, _, GT-1),
							not horizon(GT).
