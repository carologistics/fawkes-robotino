% Defined programs:
% base                           The initial setup.
% transition(gt)                 The transformations of the products.
%
% In this file defined predicates:
% base(P, B)                     The base color of product P is B.
% cap(P, C, GT)                  The cap color of product P at GT is C.
% generatedProduct(R, P, GT)     The generated identifiert for product from R at GT is P.
% product(product(R, I))         A product generated by R, its index is I.
% ring(P, R, C, GT)              The ring color of the R-th ring of product P at GT is C.
%
% Additionally used predicates:
% capMounted(P, C, GT)           Defined in mountCap.lp
% capStationAssignment(M, C)     Defined in facts.lp
% currentTime(T)                 Defined in facts.lp
% delivered(P, GT)               Defined in delivery.lp
% deliveryTimes(L, U)            Defined in facts.lp
% generateProduct(R, B, GT)      Defined in some task descriptions.
% ringMounted(M, P, C, GT)       Defined in mountRing.lp
% robot(R)                       Defined in facts.lp

#external product(product(R, T)) : robot(R), deliveryTimes(L, U), T = L..U.

#program ourTeam(t).

generatedProduct(R, product(R, GT + CT), GT) :- generateProduct(R, _, GT), currentTime(CT).
product(P) :- generatedProduct(_, P, _).
base(P, B) :- generateProduct(R, B, GT), generatedProduct(R, P, GT).

cap(P, C, GT) :- cap(P, C, GT-1), not delivered(P, GT), not horizon(GT).
cap(P, C, GT) :- capMounted(M, P, GT), capStationAssignment(M, C), not delivered(P, GT).

ring(P, R, C, GT) :- ring(P, R, C, GT-1), not delivered(P, GT), not horizon(GT).
ring(P, 1, C, GT) :- ringMounted(_, P, C, GT), not ring(P, 1, _, GT-1), not horizon(GT).
ring(P, R, C, GT) :- ringMounted(_, P, C, GT), not ring(P, R, _, GT-1), ring(P, R-1, _, GT-1), not horizon(GT).

