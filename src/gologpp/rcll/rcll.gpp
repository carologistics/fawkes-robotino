symbol domain GameState = { INIT, WAIT_START, RUNNING, PAUSED }
symbol domain GamePhase = { PRE_GAME, SETUP, EXPLORATION, PRODUCTION }
symbol domain RingColor = { RING_BLUE, RING_GREEN, RING_ORANGE, RING_YELLOW }
symbol domain BaseColor = { BASE_RED, BASE_BLACK, BASE_SILVER }
symbol domain CapColor = { CAP_BLACK, CAP_GREY }
symbol domain TeamColor = { CYAN, MAGENTA }
symbol domain Complexity = { C0, C1, C2, C3 }
symbol domain MachineSide = { INPUT, OUTPUT }

compound GameTime {
	number sec,
	number nsec
}

compound Pose2D {
	number x,
	number y,
	number ori
}

symbol fluent game_state() {
initially:
	() = INIT;
}

symbol fluent game_phase() {
initially:
	() = PRE_GAME;
}

GameTime fluent game_time() {
initially:
	() = GameTime { sec = 0, nsec = 0 };
}

exog_action game_state(number t_sec, number t_nsec, symbol state, symbol phase) {
domain:
	state in GameState;
	phase in GamePhase;
mapping:
	"RCLLGameStateInterface::/protoboard/game_state" {
		game_time_sec = t_sec,
		game_time_nsec = t_nsec,
		state = state,
		phase = phase
	}
effect:
	game_state() = state;
	game_phase() = phase;
	game_time().sec = t_sec;
	game_time().nsec = t_nsec;
}


string fluent machine_type(string name) {
initially:
	(name) = null;
}
string fluent machine_state(string name) {
initially:
	(name) = null;
}
symbol fluent machine_team(string name) {
initially:
	(name) = null;
}
number fluent machine_pose_x(string name) {
initially:
	(name) = null;
}
number fluent machine_pose_y(string name) {
initially:
	(name) = null;
}
number fluent machine_pose_ori(string name) {
initially:
	(name) = null;
}
string fluent machine_zone(string name) {
initially:
	(name) = null;
}
number fluent machine_rotation(string name) {
initially:
	(name) = null;
}

exog_action incoming_machine_info(
	string name,
	string type,
	string state,
	symbol team,
	list[number] pose,
	string zone,
	number rotation,
	bool correctly_reported,
	list[symbol] ring_colors
) {
mapping:
	"MachineInfoInterface::/protoboard/machine_info/*" {
		machine_name = name,
		machine_type = type,
		state = state,
		team_color = team,
		pose = pose,
		zone = zone,
		rotation = rotation,
		correctly_reported = correctly_reported,
		ring_colors = ring_colors
	}
effect:
	machine_type(name) = type;
	machine_state(name) = state;
	machine_team(name) = team;
	machine_pose_x(name) = pose[0];
	machine_pose_y(name) = pose[1];
	machine_pose_ori(name) = pose[2];
	machine_zone(name) = zone;
	machine_rotation(name) = rotation;
}

action create_public_peer() {
mapping:
    "create_peer" {
        address="127.0.0.1",
        send_to_port=4421,
        recv_on_port=4411
    }
}

action create_private_peer() {
mapping:
    "create_peer_crypto" {
        address="127.0.0.1",
        send_to_port=4471,
        recv_on_port=4451,
        crypto_key="randomkey"
    }
}

action set_peer(string interface_type, string interface_id, number peer_id) {
mapping:
  "send_message" {
    interface_type = interface_type,
    interface_id = interface_id,
    message_type = "SetPeerMessage",
    peer_id = peer_id
  }
}


action go_to(number x, number y, number ori) {
mapping:
	"goto" {
		x = x,
		y = y,
		ori = ori
	}
}

action prepare_bs(symbol team, symbol side, symbol color) {
domain:
  team in TeamColor;
  side in MachineSide;
  color in BaseColor;
mapping:
  "send_message" {
    interface_type = "PrepareMachineInterface",
    interface_id = "/protoboard/prepare_machine",
    message_type = "PrepareBSMessage",
    machine = "C-BS",
    team_color = team,
    side = side,
    color = color
  }
}

action send_beacon(number robot_number, string team_name, string peer_name, symbol team_color) {
domain:
  team_color in TeamColor;
mapping:
  "send_message" {
    interface_type = "SendBeaconInterface",
    interface_id = "/protoboard/send_beacon",
    message_type = "SendBeaconMessage",
    number = robot_number,
    team_name = team_name,
    peer_name = peer_name,
    team_color = team_color
  }
}

action sleep(number seconds) {
mapping:
  "sleep" {
    seconds = seconds
  }
}

// main program
{
	create_public_peer();
	create_private_peer();
  set_peer("SendBeaconInterface", "/protoboard/send_beacon", 2);
  set_peer("PrepareMachineInterface", "/protoboard/prepare_machine", 2);
	test(game_phase() == PRODUCTION & game_state() == RUNNING);
  while (game_phase() == PRODUCTION & game_state() == RUNNING) {
    send_beacon(1, "Carologistics", "R-1", CYAN);
    sleep(1);
  }
  prepare_bs(CYAN, INPUT, BASE_BLACK);
	go_to(0, 4, 0);
}
