symbol domain Block = {a, b, c}
symbol domain Location = Block | {table, hand}

symbol fluent loc(Block x) {
initially:
	(a) = c;
	(b) = table;
	(c) = b;
// 	(d) = a; //*/
}

action stack(Block x, Location y) {
precondition:
	loc(x) == hand
	& x != y // Can't stack x on x
	& x != hand
	& x != table // Can't stack table
	& (
		y == table // either y is the table...
		| !exists(Block z) loc(z) == y // or nothing is on y
	)

effect:
	loc(x) = y;

mapping:
  "stack" {
    x = x,
    y = y
  }
}

action unstack(Block x) {
precondition:
	loc(x) != hand & (!exists(Block z) (loc(z) == x))

effect:
	loc(x) = hand;

mapping:
	"unstack" {
		x = x
	}
}



bool function goal() =
	loc(a) == table & loc(b) == a & loc(c) == b


number function reward() =
	if (goal())
		100
	else
		-1


main() {
	solve(20, reward())
		while (!goal())
			pick (Block x in {a, b, c})
				pick(Location y in {table, a, b, c}) {
					unstack(x);
					stack(x, y);
        }
}
