symbol domain GameState = { INIT, WAIT_START, RUNNING, PAUSED }
symbol domain GamePhase = { PRE_GAME, SETUP, EXPLORATION, PRODUCTION }
symbol domain RingColor = { RING_BLUE, RING_GREEN, RING_ORANGE, RING_YELLOW }
symbol domain BaseColor = { BASE_RED, BASE_BLACK, BASE_SILVER }
symbol domain CapColor = { CAP_BLACK, CAP_GREY }
symbol domain TeamColor = { CYAN, MAGENTA }
symbol domain Complexity = { C0, C1, C2, C3 }

compound GameTime {
	number sec,
	number nsec
}

compound Pose2D {
	number x,
	number y,
	number ori
}

compound Order {
	number complexity,
	symbol base_color,
	symbol cap_color,
	number delivery_earliest,
	number delivery_latest,
	number delivery_gate,
	list[symbol] ring_colors,
	number quantity
}

symbol fluent game_state() {
initially:
	() = INIT;
}

symbol fluent game_phase() {
initially:
	() = PRE_GAME;
}

Pose2D fluent cur_pose() {
initially:
	() = null;
}

GameTime fluent game_time() {
initially:
	() = GameTime { sec = 0, nsec = 0 };
}

Order fluent order(number id) {
initially:
	(id) = null;
}

exog_action game_state(number t_sec, number t_nsec, symbol state, symbol phase) {
domain:
	state in GameState;
	phase in GamePhase;
mapping:
	"RCLLGameStateInterface::/protoboard/game_state" {
		game_time_sec = t_sec,
		game_time_nsec = t_nsec,
		state = state,
		phase = phase
	}
effect:
	game_state() = state;
	game_phase() = phase;
	game_time().sec = t_sec;
	game_time().nsec = t_nsec;
}

exog_action incoming_order(
	number id,
	symbol complexity,
	symbol base_color,
	list[symbol] ring_colors,
	symbol cap_color,
	number delivery_earliest,
	number delivery_latest,
	number delivery_gate,
	number quantity
) {
mapping:
	"OrderInterface::/protoboard/order/*" {
		order_id = id,
		complexity = complexity,
		base_color = base_color,
		ring_colors = ring_colors,
		cap_color = cap_color,
		delivery_period_begin = delivery_earliest,
		delivery_period_end = delivery_latest,
		delivery_gate = delivery_gate,
		quantity_requested = quantity
	}
effect:
if (complexity == C0)
	order(id).complexity = 0;
if (complexity == C1)
	order(id).complexity = 1;
if (complexity == C2)
	order(id).complexity = 2;
if (complexity == C3)
	order(id).complexity = 3;

	order(id).base_color = base_color;
	order(id).ring_colors = ring_colors;
	order(id).cap_color = cap_color;
	order(id).delivery_earliest = delivery_earliest;
	order(id).delivery_latest = delivery_latest;
	order(id).delivery_gate = delivery_gate;
	order(id).quantity = quantity;
}

action create_public_peer() {
mapping:
	"create_peer" {
		address="127.0.0.1",
		send_to_port=4445,
		recv_on_port=4444
	}
}

action create_private_peer() {
mapping:
	"create_peer_crypto" {
		address="127.0.0.1",
		send_to_port=4446,
		recv_on_port=4441,
		crypto_key="randomkey"
	}
}

action go_to(number x, number y, number ori) {
mapping:
	"goto" {
		x = x,
		y = y,
		ori = ori
	}
effect:
	cur_pose().x = x;
	cur_pose().y = y;
	cur_pose().ori = ori;
}


// main program
{
	create_public_peer();
	create_private_peer();
	test(game_phase() == PRODUCTION & game_state() == RUNNING);
	go_to(0, 4, 0);
}
