symbol domain GameState = { INIT, WAIT_START, RUNNING, PAUSED }
symbol domain GamePhase = { PRE_GAME, SETUP, EXPLORATION, PRODUCTION }
symbol domain RingColor = { RING_BLUE, RING_GREEN, RING_ORANGE, RING_YELLOW }
symbol domain BaseColor = { BASE_RED, BASE_BLACK, BASE_SILVER }
symbol domain CapColor = { CAP_BLACK, CAP_GREY }
symbol domain TeamColor = { CYAN, MAGENTA }
symbol domain Complexity = { C0, C1, C2, C3 }
symbol domain Machine = { C_BS, C_CS1, C_CS2, C_RS1, C_RS2, C_DS, C_SS,
                          M_BS, M_CS1, M_CS2, M_RS1, M_RS2, M_DS, M_SS }
symbol domain Location = Machine | { C_ins_in }
symbol domain Robot = { robot1, robot2, robot3 }

compound GameTime {
  number sec,
  number nsec
}

compound Pose2D {
  number x,
  number y,
  number ori
}

compound Order {
  number complexity,
  symbol base_color,
  symbol cap_color,
  number delivery_earliest,
  number delivery_latest,
  number delivery_gate,
  list[symbol] ring_colors,
  number quantity
}

compound MachineInfo {
  string machine,
  string state
}

symbol fluent game_state() {
initially:
  () = INIT;
}

symbol fluent game_phase() {
initially:
  () = PRE_GAME;
}

symbol fluent cur_pos() {
initially:
  () = null;
}

GameTime fluent game_time() {
initially:
  () = GameTime { sec = 0, nsec = 0 };
}

Order fluent order(number id) {
initially:
  (id) = null;
}

MachineInfo fluent machine_info(string machine) {
initially:
  (machine) = MachineInfo { machine = "", state = "" };
}

exog_action game_state(number t_sec, number t_nsec, symbol state, symbol phase) {
domain:
  state in GameState;
  phase in GamePhase;
mapping:
  "RCLLGameStateInterface::/protoboard/game_state" {
    game_time_sec = t_sec,
    game_time_nsec = t_nsec,
    state = state,
    phase = phase
  }
effect:
  game_state() = state;
  game_phase() = phase;
  game_time().sec = t_sec;
  game_time().nsec = t_nsec;
}

exog_action incoming_order(
  number id,
  symbol complexity,
  symbol base_color,
  list[symbol] ring_colors,
  symbol cap_color,
  number delivery_earliest,
  number delivery_latest,
  number delivery_gate,
  number quantity
) {
mapping:
  "OrderInterface::/protoboard/order/*" {
    order_id = id,
    complexity = complexity,
    base_color = base_color,
    ring_colors = ring_colors,
    cap_color = cap_color,
    delivery_period_begin = delivery_earliest,
    delivery_period_end = delivery_latest,
    delivery_gate = delivery_gate,
    quantity_requested = quantity
  }
effect:
if (complexity == C0)
  order(id).complexity = 0;
if (complexity == C1)
  order(id).complexity = 1;
if (complexity == C2)
  order(id).complexity = 2;
if (complexity == C3)
  order(id).complexity = 3;

  order(id).base_color = base_color;
  order(id).ring_colors = ring_colors;
  order(id).cap_color = cap_color;
  order(id).delivery_earliest = delivery_earliest;
  order(id).delivery_latest = delivery_latest;
  order(id).delivery_gate = delivery_gate;
  order(id).quantity = quantity;
}

exog_action machine_info(
  string machine,
  string state
) {
mapping:
  "MachineInfoInterface::/protoboard/machine_info/*" {
    machine_name = machine,
    state = state
  }
effect:
  machine_info(machine).state = state;
}

action create_public_peer() {
mapping:
  "create_peer" {
    address="127.0.0.1",
    send_to_port=4421,
    recv_on_port=4411
  }
}

action create_private_peer() {
mapping:
  "create_peer_crypto" {
    address="127.0.0.1",
    send_to_port=4471,
    recv_on_port=4451,
    crypto_key="randomkey"
  }
}

action goto(symbol robot, symbol place) {
domain:
  robot in Robot;
  place in Location;
mapping:
  "goto_place" {
    robot = robot,
    place = to_string(place) + "-O"
  }
effect:
  cur_pos() = place;
}

action sleep(number seconds) {
mapping:
  "sleep" {
    seconds = seconds
  }
}

// main program
{
  create_public_peer();
  create_private_peer();
  test(game_phase() == PRODUCTION & game_state() == RUNNING);
  start(goto(robot1, C_BS));
  sleep(10);
  start(goto(robot2, C_CS1));
  end(goto(robot1, C_BS));
  end(goto(robot2, C_CS1));
}
