%YAML 1.2
%TAG ! tag:fawkesrobotics.org,cfg/
---
doc-url: !url http://trac.fawkesrobotics.org/wiki/Plugins/clips-executive
---
clips-executive:
  # If true, will enable watching of facts and rules
  clips-debug: true

  # If CLIPS debugging is enabled, certain rules and facts can be excluded
  # from watching, e.g. if they are showing up at too high frequencies or
  # are not of interest.
  unwatch-facts: ["time", "Position3DInterface"]
  unwatch-rules: ["time-retract", "blackboard-read"]

  # Currently not working in clips-executive!
  #
  # If true, simulate skills (assuming they always succeed) instead of
  # actually executing the skills. The time indicates how long it should
  # take to declare success on skill execution. Note that this cannot
  # simulate side effects, like a called component writing to an interface
  #skill-sim: true
  #skill-sim-time: 2.0

  # debug level is a number of: 0 ~ none, 1 ~ minimal, 2 ~ more, 3 ~ maximum
  debug-level: 3

  # automatically pre-require redefine-warning feature? Enabling
  # this in the plugin instead of in the initial code (init.clp) is
  # beneficial because it already catches errors in said file.
  request-redefine-warning-feature: true

  # Automatically assert the (start) fact after successful initialization,
  # otherwise wait until the an enable message has been received
  # auto-start: true

  # If set to true, will trigger the assertion of a (time (now)) fact in
  # each loop. This can be used to trigger loop events in CLIPS.
  assert-time-each-loop: true

  # If set to true will force the acquisition of the skiller control.
  # This is particularly useful to kick an SkillGUI which is holding
  # the lock just due to an oversight.
  steal-skiller-control: true

  # Directory where to look for CLIPS files
  clips-dirs: ["@BASEDIR@/src/clips-specs"]

  # Set to true if you want to use navgraph facts in the CLIPS executive.
  use_navgraph: true

  # Agent name. On startup the clips-agent will try to resolve a file named
  # <agent name>.clp. It must be in the CLIPS path directories.
  spec: hackathon

  specs:
    drive-around:
      domain: drive-around/domain.clp
      goal-reasoner: drive-around/goal-reasoner.clp
      goal-expander: drive-around/fixed-sequence.clp
      action-selection: drive-around/action-selection.clp
      #macro-expansion: drive-around/action-selection.clp
      action-execution: plan-exec.clp
      execution-monitoring: drive-around/execution-monitoring.clp
      state-estimation: drive-around/state-estimation-init.clp

      action-mapping:
        goto: ppgoto{place=?(to)s}

      blackboard-preload: ["Position3DInterface"]

    hackathon:
      domain: hackathon/domain.clp
      goal-reasoner: hackathon/goal-reasoner.clp
      goal-expander: hackathon/fixed-sequence.clp
      action-selection: hackathon/action-selection.clp
      #macro-expansion: hackathon/action-selection.clp
      action-execution: plan-exec.clp
      execution-monitoring: hackathon/execution-monitoring.clp
      state-estimation: hackathon/state-estimation-init.clp

      action-mapping:
        goto: ppgoto{place=?(to)s}
        conveyor-align: conveyor_align()
        pick: shelf_pick{slot=?(slot)s}
        put: shelf_put{slot=?(slot)s}
        mps-align: mps_align{x=0.5}
        say: say{text=?(text)s, wait=true}
        say-hello: say{text="Hello ?(name)y", wait=true}
        say-goodbye: say{text="Good bye", wait=true}
