%YAML 1.2
%TAG ! tag:fawkesrobotics.org,cfg/
---
doc-url: !url http://trac.fawkesrobotics.org/wiki/Plugins/laser-cluster
---
navgraph-generator:

  map:
    # Line segmentation uses 2 * map-resolution for max inter-sample
    # distance as well as max support distance.
    
    # Maximum number of iterations to perform for line segmentation
    line_segmentation_max_iterations: 250

    # Minimum number of points that must be inliers to consider a line.
    # Note that this depends on the resolution of the map and the minimum
    # length for lines you want to detect. For example, with a resolution
    # of 0.05 (5cm per cell) and 10 min inliers, the minimum length you
    # can detect is 0.5 m (10 * 0.05).
    line_segmentation_min_inliers: 10

    # To have contiguous lines without large holes, a clustering is
    # applied after the initial line segmentation. The following
    # specifies the cluster tolerance, i.e. the maximum distance between
    # a cluster point and any neighbour and the quota of points which
    # must at least remain after clustering of the original line.
    line_cluster_tolerance: 0.2
    line_cluster_quota: 0.1
  
    # Minimum and maximum length of line to consider it. Ignored if less
    # than zero.
    # Note: we use the cell centers for line detection. That means
    # that lines are always one cell size (resolution step) shorter
    # than what you see on the map. For instance, with a resolution of
    # 0.05 (5cm per cell) and a wall that is 1.0 m long, it would be
    # detected as a 0.95 m long line (the outer two cells each inset
    # by half the cell size, in our example that's 2 * 0.025 = 0.05,
    # then actual length 1.0 - 0.05 = 0.95.  Additionally, if you have
    # walls that meet, e.g. in perpendicular, the some points of one
    # of the lines will be accounted to the other.  For example,
    # consider a corner with two walls A and B. Let's assume the line
    # for A is found first. Now when gathering support points, we
    # consider the line segmentation distance threshold which is 2 x
    # cell size. Due to this we will sample two cells of wall B for
    # the detection of wall A.
    # Therefore carefully choose the minimum length.
    line_min_length: 0.6

  filters:
    edges_by_map:
      # The edges by map filter removes edges if the closest point on
      # the edge to any occupied map cell is below a given distance.
      distance: 0.4

  visualization:
    enable: true

  # This can be enabled, e.g., for later debugging or during automated
  # experiments.
  save-to-file:
    enable: true
    # Filename, if starting with a slash (/), absolute path is assumed,
    # otherwise, it is assumed to be relative to the config directory.
    # Path may not contain two consecutive dots (..).
    filename: navgraph-generated.yaml

navgraph-generator-mps:
  # Base algorithm for graph (used by navgraph-generator)
  # This may be either voronoi or grid.
  # For grid also see the specific parameters below.
  # For voronoi it is recommended to set add-corners-as-obstacles to false.
  algorithm: grid

  # The width (length of narrow edge) of MPS stations; m
  mps-width: 0.3

  # The length (length of long edge) of MPS stations; m
  mps-length: 0.7

  # The distance in which to place approach points from the machine (measured from the outside of the mps, not the center); m
  approach-distance: 0.75

  # Distance of the shelfs along the long side of the MPS (CS) relative to the middle
  left-shelf-distance: 0.105
  middle-shelf-distance: 0.205
  right-shelf-distance: 0.305
  slide-distance: 0.280

  # Set to true to add the corners of an MPS as obstacles themselves.
  # Otherwise only the center point of the MPS is added as obstacles
  # (this is still added if corners are enabled).
  add-corners-as-obstacles: true

  # The minimum distances edges must have from any occipied cell in the map; m
  map-cell-min-dist: 0.4

  # For lines extracted out of the map, add points no further apart
  # from each other than this value; m
  map-point-max-dist: 0.5

  # A file which contains a base graph that will be (partially)
  # overlayed with the generated graph. The main purpose is to
  # provide an exploration graph for when there are no recognized
  # machines, yet.
  base-graph: navgraph-basis.yaml

  bounding-box:
    p1: [-7,0]
    p2: [ 7,8]

  # Number of wait zones per half-field
  # i.e. generate X wait zones for x < 0 and X wait zones for x > 0
  num-wait-zones: 3

  # Grid algorithm specific parameters
  grid:
    # This is the spacing of the grid, i.e., the grid has cells of
    # spacing x spacing size. Points are generated in the middle of
    # the cells.
    spacing: 1.0

    # Minimum distance of any edge to an obstacle, if the distance
    # is less than the given margin the edge is removed.
    margin: 0.3

    # Set to true to create diagonal edges between the grid points.
    # This can lead to better travel routes (less Manhattan-style) and
    # better connected graphs (the direct edge may be discarded, but the
    # triangle connection along the (half-)diagonals may stay intact.
    # However, it increases the number of nodes and thus the
    # computational overhead.
    add-diagonals: false
