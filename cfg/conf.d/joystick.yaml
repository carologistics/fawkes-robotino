%YAML 1.2
%TAG ! tag:fawkesrobotics.org,cfg/
---
doc-url: !url http://trac.fawkesrobotics.org/wiki/Plugins/joystick
---
/hardware/joystick:
  # Joystick device file
  device_file: /dev/input/js0

  safety_lockout:
    # True to enable safety lockout feature.
    # This feature requires that axes 0 and 1 (usually primary cross) must be
    # moved all the way once while any button is pressed. After the button is
    # then released the data is passed through to the blackboard
    enable: true

    # 128: accept only start button on XBox controller
    button-mask: 128

    # Time in seconds after which to re-enable the safety lockout if no
    # data has been received.
    timeout: 30.0

    # Accept exactly buttons matching this mask even during safety lockout
    # On xbox controller 44 are: RB, X, and Y
    bypass-button-mask: 44

  # Configuration settings for the joystick-teleop plugin
  # The example configuration is suitable for an Xbox 360 controller
  teleop:
    # Axes index for forward/backward, sideward, and rotational movement
    # To find out the proper axes for your joystick run:
    # jstest /dev/input/js0
    # (replace the device path with the device_file configured above)
    # Then move the axis you want to use and note and set its index here
    axis_forward:  1
    axis_sideward: 0
    axis_rotation: 3

    # Accept axis value if its absolute value is above this threshold
    axis_threshold: 0.2

    # Deadman settings, only if the button or axis is active movement
    # commands are executed. As soon as they are released the robot stops.
    # At least one of the two methods must be configured, or the robot
    # won't move at all.
    
    # Deadman axis
    # Configure an axis and a threshold. For a negative threshold,
    # movement is allowed if the axis value is less than the given value.
    # If positive, movements are executed if the axis value is greater
    # than the configured value. To disable using an axis as deadman
    # switch comment out the following line.
    deadman_axis: 5
    deadman_axis_threshold: -0.5

    # Deadman button
    # The button mask is AND'ed to the JoystickInterface::pressed_buttons
    # field. If the resulting value is non-zero, the robot executes
    # movement commands. To get the appropriate value sum up values of
    # the appropriate BUTTON_* constants of the JoystickInterface.
    # To react to all buttons, set value to 4294967295.
    # The value "4294965759" accepts all buttons except the axis push-down
    # buttons on the XBox-Controller. They have rather surprising effects
    # making the robot drive unexpectedly.
    # The value "4294965631" accepts all buttons except the axis push-down
    # buttons and the start button
    deadman_button_mask: 4294965631

    # Run-stop buttons
    # Whenever this button combination is pressed, enable/disable the
    # motor enabled state. For this to work always, even during safety
    # lockout, set the very same button combination(s) as safety bypass
    # buttons above.
    # These button combos may be the same for both, in which case toggling
    # happens only after the button has been released.
    # Enable on xboxctrl: RB and Y
    runstop-enable-buttons: 40
    # Disable on xboxctrl: RB and X
    runstop-disable-buttons: 36

    # Drive mode switching
    # Certain button or an axis can be configured that will allow to
    # use a different drive mode as long as the button is pushed.
    # The initial drive mode is "normal". As long as any of the
    # drive mode switching conditions below applies, the "special"
    # drive mode is used.
    # For example, during demos you can default to a slow "normal"
    # mode and allow for a faster special for more experienced users.
    # The other way around can be used for normal cruising speed and
    # special slower speed for fine movement.
    # The conditions work the same way as the deadman switch documented
    # above.
    drive_mode_button_mask: 0
    drive_mode_axis: 2
    drive_mode_axis_threshold: -0.5

    # Maximum velocity forward and sideward; m/s
    # Maximum rotation; rad/s
    drive_modes:
      normal:
        max_vx: 0.5
        max_vy: 0.5
        max_omega: 1.57

      special:
        max_vx: 1.0
        max_vy: 1.0
        max_omega: 2.36

  # This feature stops the robot from moving forward if an obstacle is
  # detected up front.
  # A laser must be present for this feature to work.
    collision_safety:
      # True to enable collision safety feature.
      enabled: false

      # Stopping distance if obstacle is within configured angle
      distance: 0.4

      # Angle within which obstacles are detected
      # Given in degrees to the left and right from the front
      # i.e. 20 degrees will have an complete opening angle of 41 degrees
      angle: 20

    # Interface ID for MotorInterface to send TransRotMessages to.
    motor_interface_id: Robotino
    # Interface ID for JoystickInterface to read data from
    joystick_interface_id: Joystick

    # Interface ID for Laser360Interface
    laser_interface_id: Laser urg-filtered
